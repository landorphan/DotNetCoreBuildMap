// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.4.0.0
//      SpecFlow Generator Version:3.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Landorphan.Abstractions.FileSystem.Paths.UnitTests.Specifications.Path
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Path Segment Notation")]
    [NUnit.Framework.CategoryAttribute("Check-In")]
    public partial class PathSegmentNotationFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = new string[] {
                "Check-In"};
        
#line 1 "PathSegmentNotation.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Specifications/Path", "Path Segment Notation", "\tIn order to round trip path\'s to strings\r\n\tAs a developer\r\n\tI want to be able to" +
                    " convert strings to path and back without loosing fidelity", ProgrammingLanguage.CSharp, new string[] {
                        "Check-In"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("I can convert paths to and from Path Segment Notation")]
        [NUnit.Framework.TestCaseAttribute("(empty)", "Windows", "[PSN:WIN]/{S}.", "Empty segemnts are converted to self segments", null)]
        [NUnit.Framework.TestCaseAttribute("(empty)", "Linux", "[PSN:POS]/{S}.", "Empty segemnts are converted to self segments", null)]
        [NUnit.Framework.TestCaseAttribute("(null)", "Windows", "[PSN:WIN]/{S}.", "Null segemnts are converted to self segments", null)]
        [NUnit.Framework.TestCaseAttribute("(null)", "Linux", "[PSN:POS]/{S}.", "Null segemnts are converted to self segments", null)]
        [NUnit.Framework.TestCaseAttribute("a`b`c", "Windows", "[PSN:WIN]/{G}a/{G}b/{G}c", "Basic Generic Path", null)]
        [NUnit.Framework.TestCaseAttribute("a/b/c", "Linux", "[PSN:POS]/{G}a/{G}b/{G}c", "Basic Generic Path", null)]
        [NUnit.Framework.TestCaseAttribute("`", "Windows", "[PSN:WIN]/{$}", "Volumeless Root Segment", null)]
        [NUnit.Framework.TestCaseAttribute("/", "Linux", "[PSN:POS]/{R}", "Root Segment", null)]
        [NUnit.Framework.TestCaseAttribute("`a", "Windows", "[PSN:WIN]/{$}/{G}a", "VRS + G", null)]
        [NUnit.Framework.TestCaseAttribute("/a", "Linux", "[PSN:POS]/{R}/{G}a", "Root + G", null)]
        [NUnit.Framework.TestCaseAttribute("C:`a", "Windows", "[PSN:WIN]/{R}C/{G}a", "Root + G", null)]
        [NUnit.Framework.TestCaseAttribute("C:/a", "Linux", "[PSN:POS]/{G}C:/{G}a", "G + G", null)]
        [NUnit.Framework.TestCaseAttribute("C:a", "Windows", "[PSN:WIN]/{V}C/{G}a", "V + G", null)]
        [NUnit.Framework.TestCaseAttribute("C:a", "Linux", "[PSN:POS]/{G}C:a", "G", null)]
        [NUnit.Framework.TestCaseAttribute("``server`dir", "Windows", "[PSN:WIN]/{X}server/{G}dir", "Remote + Generic", null)]
        [NUnit.Framework.TestCaseAttribute("//server/dir", "Linux", "[PSN:POS]/{X}server/{G}dir", "Remote + Generic", null)]
        [NUnit.Framework.TestCaseAttribute(".`..`dir", "Windows", "[PSN:WIN]/{S}./{P}../{G}dir", "Self + Parent + Generic", null)]
        [NUnit.Framework.TestCaseAttribute("./../dir", "Linux", "[PSN:POS]/{S}./{P}../{G}dir", "Self + Parent + Generic", null)]
        [NUnit.Framework.TestCaseAttribute("C:`dir``dir", "Windows", "[PSN:WIN]/{R}C/{G}dir/{E}/{G}dir", "Root + Generic + Empty + Generic", null)]
        [NUnit.Framework.TestCaseAttribute("/dir//dir", "Linux", "[PSN:POS]/{R}/{G}dir/{E}/{G}dir", "Root + Generic + Empty + Generic", null)]
        [NUnit.Framework.TestCaseAttribute("C:`dir`CON", "Windows", "[PSN:WIN]/{R}C/{G}dir/{D}CON", "Device (Note the path does not auto simplify", null)]
        [NUnit.Framework.TestCaseAttribute("C:/dir/CON", "Linux", "[PSN:POS]/{G}C:/{G}dir/{G}CON", "Generic + Generic + Generic", null)]
        [NUnit.Framework.TestCaseAttribute("C:`dir`file%00name.txt", "Windows", "[PSN:WIN]/{R}C/{G}dir/{G}file%00name.txt", "Encoded Characters", null)]
        [NUnit.Framework.TestCaseAttribute("C:/dir/file%00name.txt", "Linux", "[PSN:POS]/{G}C:/{G}dir/{G}file%00name.txt", "Encoded Characters", null)]
        [NUnit.Framework.TestCaseAttribute("C:`dir`file%01name.txt", "Windows", "[PSN:WIN]/{R}C/{G}dir/{G}file%01name.txt", "Encoded Characters", null)]
        [NUnit.Framework.TestCaseAttribute("C:/dir/file%01name.txt", "Linux", "[PSN:POS]/{G}C:/{G}dir/{G}file%01name.txt", "Encoded Characters", null)]
        [NUnit.Framework.TestCaseAttribute("C:`dir`file%02name.txt", "Windows", "[PSN:WIN]/{R}C/{G}dir/{G}file%02name.txt", "Encoded Characters", null)]
        [NUnit.Framework.TestCaseAttribute("C:/dir/file%02name.txt", "Linux", "[PSN:POS]/{G}C:/{G}dir/{G}file%02name.txt", "Encoded Characters", null)]
        [NUnit.Framework.TestCaseAttribute("C:`dir`file%03name.txt", "Windows", "[PSN:WIN]/{R}C/{G}dir/{G}file%03name.txt", "Encoded Characters", null)]
        [NUnit.Framework.TestCaseAttribute("C:/dir/file%03name.txt", "Linux", "[PSN:POS]/{G}C:/{G}dir/{G}file%03name.txt", "Encoded Characters", null)]
        [NUnit.Framework.TestCaseAttribute("C:`dir`file%04name.txt", "Windows", "[PSN:WIN]/{R}C/{G}dir/{G}file%04name.txt", "Encoded Characters", null)]
        [NUnit.Framework.TestCaseAttribute("C:/dir/file%04name.txt", "Linux", "[PSN:POS]/{G}C:/{G}dir/{G}file%04name.txt", "Encoded Characters", null)]
        [NUnit.Framework.TestCaseAttribute("C:`dir`file%05name.txt", "Windows", "[PSN:WIN]/{R}C/{G}dir/{G}file%05name.txt", "Encoded Characters", null)]
        [NUnit.Framework.TestCaseAttribute("C:/dir/file%05name.txt", "Linux", "[PSN:POS]/{G}C:/{G}dir/{G}file%05name.txt", "Encoded Characters", null)]
        [NUnit.Framework.TestCaseAttribute("C:`dir`file%06name.txt", "Windows", "[PSN:WIN]/{R}C/{G}dir/{G}file%06name.txt", "Encoded Characters", null)]
        [NUnit.Framework.TestCaseAttribute("C:/dir/file%06name.txt", "Linux", "[PSN:POS]/{G}C:/{G}dir/{G}file%06name.txt", "Encoded Characters", null)]
        [NUnit.Framework.TestCaseAttribute("C:`dir`file%07name.txt", "Windows", "[PSN:WIN]/{R}C/{G}dir/{G}file%07name.txt", "Encoded Characters", null)]
        [NUnit.Framework.TestCaseAttribute("C:/dir/file%07name.txt", "Linux", "[PSN:POS]/{G}C:/{G}dir/{G}file%07name.txt", "Encoded Characters", null)]
        [NUnit.Framework.TestCaseAttribute("C:`dir`file%08name.txt", "Windows", "[PSN:WIN]/{R}C/{G}dir/{G}file%08name.txt", "Encoded Characters", null)]
        [NUnit.Framework.TestCaseAttribute("C:/dir/file%08name.txt", "Linux", "[PSN:POS]/{G}C:/{G}dir/{G}file%08name.txt", "Encoded Characters", null)]
        [NUnit.Framework.TestCaseAttribute("C:`dir`file%09name.txt", "Windows", "[PSN:WIN]/{R}C/{G}dir/{G}file%09name.txt", "Encoded Characters", null)]
        [NUnit.Framework.TestCaseAttribute("C:/dir/file%09name.txt", "Linux", "[PSN:POS]/{G}C:/{G}dir/{G}file%09name.txt", "Encoded Characters", null)]
        [NUnit.Framework.TestCaseAttribute("C:`dir`file%0Aname.txt", "Windows", "[PSN:WIN]/{R}C/{G}dir/{G}file%0Aname.txt", "Encoded Characters", null)]
        [NUnit.Framework.TestCaseAttribute("C:/dir/file%0Aname.txt", "Linux", "[PSN:POS]/{G}C:/{G}dir/{G}file%0Aname.txt", "Encoded Characters", null)]
        [NUnit.Framework.TestCaseAttribute("C:`dir`file%0Bname.txt", "Windows", "[PSN:WIN]/{R}C/{G}dir/{G}file%0Bname.txt", "Encoded Characters", null)]
        [NUnit.Framework.TestCaseAttribute("C:/dir/file%0Bname.txt", "Linux", "[PSN:POS]/{G}C:/{G}dir/{G}file%0Bname.txt", "Encoded Characters", null)]
        [NUnit.Framework.TestCaseAttribute("C:`dir`file%0Cname.txt", "Windows", "[PSN:WIN]/{R}C/{G}dir/{G}file%0Cname.txt", "Encoded Characters", null)]
        [NUnit.Framework.TestCaseAttribute("C:/dir/file%0Cname.txt", "Linux", "[PSN:POS]/{G}C:/{G}dir/{G}file%0Cname.txt", "Encoded Characters", null)]
        [NUnit.Framework.TestCaseAttribute("C:`dir`file%0Dname.txt", "Windows", "[PSN:WIN]/{R}C/{G}dir/{G}file%0Dname.txt", "Encoded Characters", null)]
        [NUnit.Framework.TestCaseAttribute("C:/dir/file%0Dname.txt", "Linux", "[PSN:POS]/{G}C:/{G}dir/{G}file%0Dname.txt", "Encoded Characters", null)]
        [NUnit.Framework.TestCaseAttribute("C:`dir`file%0Ename.txt", "Windows", "[PSN:WIN]/{R}C/{G}dir/{G}file%0Ename.txt", "Encoded Characters", null)]
        [NUnit.Framework.TestCaseAttribute("C:/dir/file%0Ename.txt", "Linux", "[PSN:POS]/{G}C:/{G}dir/{G}file%0Ename.txt", "Encoded Characters", null)]
        [NUnit.Framework.TestCaseAttribute("C:`dir`file%0Fname.txt", "Windows", "[PSN:WIN]/{R}C/{G}dir/{G}file%0Fname.txt", "Encoded Characters", null)]
        [NUnit.Framework.TestCaseAttribute("C:/dir/file%0Fname.txt", "Linux", "[PSN:POS]/{G}C:/{G}dir/{G}file%0Fname.txt", "Encoded Characters", null)]
        [NUnit.Framework.TestCaseAttribute("C:`dir`file%10name.txt", "Windows", "[PSN:WIN]/{R}C/{G}dir/{G}file%10name.txt", "Encoded Characters", null)]
        [NUnit.Framework.TestCaseAttribute("C:/dir/file%10name.txt", "Linux", "[PSN:POS]/{G}C:/{G}dir/{G}file%10name.txt", "Encoded Characters", null)]
        [NUnit.Framework.TestCaseAttribute("C:`dir`file%11name.txt", "Windows", "[PSN:WIN]/{R}C/{G}dir/{G}file%11name.txt", "Encoded Characters", null)]
        [NUnit.Framework.TestCaseAttribute("C:/dir/file%11name.txt", "Linux", "[PSN:POS]/{G}C:/{G}dir/{G}file%11name.txt", "Encoded Characters", null)]
        [NUnit.Framework.TestCaseAttribute("C:`dir`file%12name.txt", "Windows", "[PSN:WIN]/{R}C/{G}dir/{G}file%12name.txt", "Encoded Characters", null)]
        [NUnit.Framework.TestCaseAttribute("C:/dir/file%12name.txt", "Linux", "[PSN:POS]/{G}C:/{G}dir/{G}file%12name.txt", "Encoded Characters", null)]
        [NUnit.Framework.TestCaseAttribute("C:`dir`file%13name.txt", "Windows", "[PSN:WIN]/{R}C/{G}dir/{G}file%13name.txt", "Encoded Characters", null)]
        [NUnit.Framework.TestCaseAttribute("C:/dir/file%13name.txt", "Linux", "[PSN:POS]/{G}C:/{G}dir/{G}file%13name.txt", "Encoded Characters", null)]
        [NUnit.Framework.TestCaseAttribute("C:`dir`file%14name.txt", "Windows", "[PSN:WIN]/{R}C/{G}dir/{G}file%14name.txt", "Encoded Characters", null)]
        [NUnit.Framework.TestCaseAttribute("C:/dir/file%14name.txt", "Linux", "[PSN:POS]/{G}C:/{G}dir/{G}file%14name.txt", "Encoded Characters", null)]
        [NUnit.Framework.TestCaseAttribute("C:`dir`file%15name.txt", "Windows", "[PSN:WIN]/{R}C/{G}dir/{G}file%15name.txt", "Encoded Characters", null)]
        [NUnit.Framework.TestCaseAttribute("C:/dir/file%15name.txt", "Linux", "[PSN:POS]/{G}C:/{G}dir/{G}file%15name.txt", "Encoded Characters", null)]
        [NUnit.Framework.TestCaseAttribute("C:`dir`file%16name.txt", "Windows", "[PSN:WIN]/{R}C/{G}dir/{G}file%16name.txt", "Encoded Characters", null)]
        [NUnit.Framework.TestCaseAttribute("C:/dir/file%16name.txt", "Linux", "[PSN:POS]/{G}C:/{G}dir/{G}file%16name.txt", "Encoded Characters", null)]
        [NUnit.Framework.TestCaseAttribute("C:`dir`file%17name.txt", "Windows", "[PSN:WIN]/{R}C/{G}dir/{G}file%17name.txt", "Encoded Characters", null)]
        [NUnit.Framework.TestCaseAttribute("C:/dir/file%17name.txt", "Linux", "[PSN:POS]/{G}C:/{G}dir/{G}file%17name.txt", "Encoded Characters", null)]
        [NUnit.Framework.TestCaseAttribute("C:`dir`file%18name.txt", "Windows", "[PSN:WIN]/{R}C/{G}dir/{G}file%18name.txt", "Encoded Characters", null)]
        [NUnit.Framework.TestCaseAttribute("C:/dir/file%18name.txt", "Linux", "[PSN:POS]/{G}C:/{G}dir/{G}file%18name.txt", "Encoded Characters", null)]
        [NUnit.Framework.TestCaseAttribute("C:`dir`file%19name.txt", "Windows", "[PSN:WIN]/{R}C/{G}dir/{G}file%19name.txt", "Encoded Characters", null)]
        [NUnit.Framework.TestCaseAttribute("C:/dir/file%19name.txt", "Linux", "[PSN:POS]/{G}C:/{G}dir/{G}file%19name.txt", "Encoded Characters", null)]
        [NUnit.Framework.TestCaseAttribute("C:`dir`file%1Aname.txt", "Windows", "[PSN:WIN]/{R}C/{G}dir/{G}file%1Aname.txt", "Encoded Characters", null)]
        [NUnit.Framework.TestCaseAttribute("C:/dir/file%1Aname.txt", "Linux", "[PSN:POS]/{G}C:/{G}dir/{G}file%1Aname.txt", "Encoded Characters", null)]
        [NUnit.Framework.TestCaseAttribute("C:`dir`file%1Bname.txt", "Windows", "[PSN:WIN]/{R}C/{G}dir/{G}file%1Bname.txt", "Encoded Characters", null)]
        [NUnit.Framework.TestCaseAttribute("C:/dir/file%1Bname.txt", "Linux", "[PSN:POS]/{G}C:/{G}dir/{G}file%1Bname.txt", "Encoded Characters", null)]
        [NUnit.Framework.TestCaseAttribute("C:`dir`file%1Cname.txt", "Windows", "[PSN:WIN]/{R}C/{G}dir/{G}file%1Cname.txt", "Encoded Characters", null)]
        [NUnit.Framework.TestCaseAttribute("C:/dir/file%1Cname.txt", "Linux", "[PSN:POS]/{G}C:/{G}dir/{G}file%1Cname.txt", "Encoded Characters", null)]
        [NUnit.Framework.TestCaseAttribute("C:`dir`file%1Dname.txt", "Windows", "[PSN:WIN]/{R}C/{G}dir/{G}file%1Dname.txt", "Encoded Characters", null)]
        [NUnit.Framework.TestCaseAttribute("C:/dir/file%1Dname.txt", "Linux", "[PSN:POS]/{G}C:/{G}dir/{G}file%1Dname.txt", "Encoded Characters", null)]
        [NUnit.Framework.TestCaseAttribute("C:`dir`file%1Ename.txt", "Windows", "[PSN:WIN]/{R}C/{G}dir/{G}file%1Ename.txt", "Encoded Characters", null)]
        [NUnit.Framework.TestCaseAttribute("C:/dir/file%1Ename.txt", "Linux", "[PSN:POS]/{G}C:/{G}dir/{G}file%1Ename.txt", "Encoded Characters", null)]
        [NUnit.Framework.TestCaseAttribute("C:`dir`file%1Fname.txt", "Windows", "[PSN:WIN]/{R}C/{G}dir/{G}file%1Fname.txt", "Encoded Characters", null)]
        [NUnit.Framework.TestCaseAttribute("C:/dir/file%1Fname.txt", "Linux", "[PSN:POS]/{G}C:/{G}dir/{G}file%1Fname.txt", "Encoded Characters", null)]
        [NUnit.Framework.TestCaseAttribute("C:`dir`file%20name.txt", "Windows", "[PSN:WIN]/{R}C/{G}dir/{G}file%20name.txt", "Encoded Characters", null)]
        [NUnit.Framework.TestCaseAttribute("C:/dir/file%20name.txt", "Linux", "[PSN:POS]/{G}C:/{G}dir/{G}file%20name.txt", "Encoded Characters", null)]
        [NUnit.Framework.TestCaseAttribute("C:`dir`file%name.txt", "Windows", "[PSN:WIN]/{R}C/{G}dir/{G}file%25name.txt", "Encoded Characters", null)]
        [NUnit.Framework.TestCaseAttribute("C:/dir/file%name.txt", "Linux", "[PSN:POS]/{G}C:/{G}dir/{G}file%25name.txt", "Encoded Characters", null)]
        [NUnit.Framework.TestCaseAttribute("C:`dir`file%2Fname.txt", "Windows", "[PSN:WIN]/{R}C/{G}dir/{G}file%252Fname.txt", "NOTE: It\'s imposible to embed a \'/\' using normal path syntax so this is the expec" +
            "ted result", null)]
        [NUnit.Framework.TestCaseAttribute("C:/dir/file%2Fname.txt", "Linux", "[PSN:POS]/{G}C:/{G}dir/{G}file%252Fname.txt", "NOTE: It\'s imposible to embed a \'/\' using normal path syntax so this is the expec" +
            "ted result", null)]
        [NUnit.Framework.TestCaseAttribute("[PSN:WIN]/{R} C/{G} dir/{G} file%2Fname.txt", "Windows", "[PSN:WIN]/{R}C/{G}dir/{G}file%2Fname.txt", "The only way to embed a \'/\' in a path would be through PSN (the result is an ille" +
            "gal path)", null)]
        [NUnit.Framework.TestCaseAttribute("[PSN:POS]/{R} C/{G} dir/{G} file%2Fname.txt", "Linux", "[PSN:POS]/{R}C/{G}dir/{G}file%2Fname.txt", "The only way to embed a \'/\' in a path would be through PSN (the result is an ille" +
            "gal path)", null)]
        [NUnit.Framework.TestCaseAttribute("[PSN:WIN]/{R} C/{G} dir/{G} file`name.txt", "Windows", "[PSN:WIN]/{R}C/{G}dir/{G}file`name.txt", "The \'\\\' character is acceptable in PSN but will generate an illegal path", null)]
        [NUnit.Framework.TestCaseAttribute("[PSN:POS]/{R} C/{G} dir/{G} file`name.txt", "Linux", "[PSN:POS]/{R}C/{G}dir/{G}file`name.txt", "The \'\\\' character is acceptable in PSN but will generate an illegal path", null)]
        public virtual void ICanConvertPathsToAndFromPathSegmentNotation(string path, string oS, string pSNForm, string notes, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Path", path);
            argumentsOfScenario.Add("OS", oS);
            argumentsOfScenario.Add("PSN Form", pSNForm);
            argumentsOfScenario.Add("Notes", notes);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I can convert paths to and from Path Segment Notation", null, tagsOfScenario, argumentsOfScenario);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
 testRunner.Given(string.Format("I have the following path: {0}", path), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 10
   testRunner.And(string.Format("I\'m running on the following Operating System: {0}", oS), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 11
   testRunner.And("I parse the path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 12
  testRunner.When("I convert the path to path segment notation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 13
  testRunner.Then(string.Format("The following PSN string should be produced: {0}", pSNForm), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 16
 testRunner.Given(string.Format("I have the following path: {0}", pSNForm), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 17
  testRunner.When("I re-parse the path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 18
  testRunner.Then("the two paths should be the same", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
