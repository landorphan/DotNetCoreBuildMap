// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.3.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Landorphan.Abstractions.FileSystem.Paths.UnitTests.Specifications.Path.Posix
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.3.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Posix Tokenizer")]
    [NUnit.Framework.CategoryAttribute("Check-In")]
    public partial class PosixTokenizerFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = new string[] {
                "Check-In"};
        
#line 1 "PosixTokenizer.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Posix Tokenizer", "\tIn order to develop a reliable Windows Path parser \r\n\tAs a member of the Landorp" +
                    "han Team\r\n\tI want to to be able to convert incoming paths into a more managable " +
                    "form", ProgrammingLanguage.CSharp, new string[] {
                        "Check-In"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Windows tokenizer generates the following tokens")]
        [NUnit.Framework.TestCaseAttribute("(null)", "(null)", "(null)", "(null)", "(null)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("(empty)", "(empty)", "(null)", "(null)", "(null)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("C:/", "C:", "(empty)", "(null)", "(null)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("C:/dir/file.txt", "C:", "dir", "file.txt", "(null)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("C:/dir/file.txt/", "C:", "dir", "file.txt", "(empty)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("C:/dir", "C:", "dir", "(null)", "(null)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("C:/dir/", "C:", "dir", "(empty)", "(null)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("C:/dir//file.txt", "C:", "dir", "(empty)", "file.txt", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("C:./file.txt", "C:.", "file.txt", "(null)", "(null)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("C:./file.txt/", "C:.", "file.txt", "(empty)", "(null)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("C:file.txt", "C:file.txt", "(null)", "(null)", "(null)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("C:file.txt/", "C:file.txt", "(empty)", "(null)", "(null)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("C:dir", "C:dir", "(null)", "(null)", "(null)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("C:dir/", "C:dir", "(empty)", "(null)", "(null)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("C:dir/file.txt", "C:dir", "file.txt", "(null)", "(null)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("C:dir/file.txt/", "C:dir", "file.txt", "(empty)", "(null)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("//server/share", "UNC:server", "share", "(null)", "(null)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("//server/share/", "UNC:server", "share", "(empty)", "(null)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("//server/file.txt", "UNC:server", "file.txt", "(null)", "(null)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("//server/file.txt/", "UNC:server", "file.txt", "(empty)", "(null)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("//server/share/dir/file.txt", "UNC:server", "share", "dir", "file.txt", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("//server/share/dir/file.txt/", "UNC:server", "share", "dir", "file.txt", "(empty)", null)]
        [NUnit.Framework.TestCaseAttribute("//?/C:/dir/file.txt", "UNC:?", "C:", "dir", "file.txt", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("//?/C:/dir/file.txt/", "UNC:?", "C:", "dir", "file.txt", "(empty)", null)]
        [NUnit.Framework.TestCaseAttribute("//?/UNC/server/share/file.txt", "UNC:?", "UNC", "server", "share", "file.txt", null)]
        [NUnit.Framework.TestCaseAttribute("//?/UNC/server/file.txt/", "UNC:?", "UNC", "server", "file.txt", "(empty)", null)]
        [NUnit.Framework.TestCaseAttribute("/dir/file.txt/", "(empty)", "dir", "file.txt", "(empty)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute(".", ".", "(null)", "(null)", "(null)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("./", ".", "(empty)", "(null)", "(null)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("./file.txt", ".", "file.txt", "(null)", "(null)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("./file.txt/", ".", "file.txt", "(empty)", "(null)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("./dir", ".", "dir", "(null)", "(null)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("./dir/", ".", "dir", "(empty)", "(null)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("./dir/file.txt", ".", "dir", "file.txt", "(null)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("./dir/file.txt/", ".", "dir", "file.txt", "(empty)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("..", "..", "(null)", "(null)", "(null)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("../", "..", "(empty)", "(null)", "(null)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("../dir/file.txt", "..", "dir", "file.txt", "(null)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("../dir/file.txt/", "..", "dir", "file.txt", "(empty)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("UNC:server", "UNC:server", "(null)", "(null)", "(null)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("UNC:server/", "UNC:server", "(empty)", "(null)", "(null)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("UNC:server/share", "UNC:server", "share", "(null)", "(null)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("UNC:server/share/", "UNC:server", "share", "(empty)", "(null)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("UNC:server/share/dir", "UNC:server", "share", "dir", "(null)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("UNC:server/share/dir/", "UNC:server", "share", "dir", "(empty)", "(null)", null)]
        public virtual void WindowsTokenizerGeneratesTheFollowingTokens(string path, string token0, string token1, string token2, string token3, string token4, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Path", path);
            argumentsOfScenario.Add("Token 0", token0);
            argumentsOfScenario.Add("Token 1", token1);
            argumentsOfScenario.Add("Token 2", token2);
            argumentsOfScenario.Add("Token 3", token3);
            argumentsOfScenario.Add("Token 4", token4);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Windows tokenizer generates the following tokens", null, tagsOfScenario, argumentsOfScenario);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
 testRunner.Given(string.Format("I have the following path: {0}", path), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 9
  testRunner.When("I tokenize the path with the \'Posix\' tokenizer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 10
  testRunner.Then(string.Format("token \'0\' should be: {0}", token0), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 11
     testRunner.And(string.Format("token \'1\' should be: {0}", token1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 12
     testRunner.And(string.Format("token \'2\' should be: {0}", token2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 13
     testRunner.And(string.Format("token \'3\' should be: {0}", token3), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 14
     testRunner.And(string.Format("token \'4\' should be: {0}", token4), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
