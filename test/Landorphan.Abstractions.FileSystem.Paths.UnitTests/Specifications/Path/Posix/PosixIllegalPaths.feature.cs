// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.4.0.0
//      SpecFlow Generator Version:3.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Landorphan.Abstractions.FileSystem.Paths.UnitTests.Specifications.Path.Posix
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Posix Illegal Paths")]
    [NUnit.Framework.CategoryAttribute("Check-In")]
    public partial class PosixIllegalPathsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = new string[] {
                "Check-In"};
        
#line 1 "PosixIllegalPaths.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Specifications/Path/Posix", "Posix Illegal Paths", "\tIn order to reliably interact with the file systems of multiple platforms\r\n\tAs a" +
                    " developer\r\n\tI want illegal paths to be identified.", ProgrammingLanguage.CSharp, new string[] {
                        "Check-In"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("I can identify illegal paths")]
        [NUnit.Framework.TestCaseAttribute("[PSN:POS]/{R}", "Legal", "Legal", null)]
        [NUnit.Framework.TestCaseAttribute("[PSN:POS]/{G} dir", "Legal", "Legal", null)]
        [NUnit.Framework.TestCaseAttribute("[PSN:POS]/{R}/{E}/{G} dir", "Legal", "Legal", null)]
        [NUnit.Framework.TestCaseAttribute("[PSN:POS]/{R}/{0}/{G} dir", "Legal", "Legal", null)]
        [NUnit.Framework.TestCaseAttribute("[PSN:POS]/{R}/{S} ./{G} dir", "Legal", "Legal", null)]
        [NUnit.Framework.TestCaseAttribute("[PSN:POS]/{R}/{P} ../{G} dir", "Legal", "Legal", null)]
        [NUnit.Framework.TestCaseAttribute("[PSN:POS]/{X} server/{G} share", "Legal", "Legal", null)]
        [NUnit.Framework.TestCaseAttribute("[PSN:POS]/{V} C", "Illegal", "Vol Rel on Posix are Illegal", null)]
        [NUnit.Framework.TestCaseAttribute("[PSN:POS]/{$}/{G} dir", "Illegal", "Vol Abs on Posix are Illegal", null)]
        [NUnit.Framework.TestCaseAttribute("[PSN:POS]/{D} CON", "Illegal", "Device on Posix are Illegal", null)]
        [NUnit.Framework.TestCaseAttribute("[PSN:POS]/{S}/{G} dir", "Legal", "=== START NOTE FOR SECTION ===", null)]
        [NUnit.Framework.TestCaseAttribute("[PSN:POS]/{S} ./{G} dir", "Legal", "Path status is always compared against the", null)]
        [NUnit.Framework.TestCaseAttribute("[PSN:POS]/{S} ..", "Legal", "simplpified form.  When a path is simplified", null)]
        [NUnit.Framework.TestCaseAttribute("[PSN:POS]/{S} dir", "Legal", "Only the \'.\' and \'..\' that can not be simplified", null)]
        [NUnit.Framework.TestCaseAttribute("[PSN:POS]/{P}/{G} dir", "Legal", "are kept.  They are further replaced with the", null)]
        [NUnit.Framework.TestCaseAttribute("[PSN:POS]/{P} ../{G} dir", "Legal", "singleton instance of of that segment ...", null)]
        [NUnit.Framework.TestCaseAttribute("[PSN:POS]/{P} ./{G} dir", "Legal", "Therefore they are always legal when evaluted", null)]
        [NUnit.Framework.TestCaseAttribute("[PSN:POS]/{P} dir/{G} dir", "Legal", "=== END   NOTE FOR SECTION ===", null)]
        public virtual void ICanIdentifyIllegalPaths(string path, string pathStatus, string notes, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Path", path);
            argumentsOfScenario.Add("Path Status", pathStatus);
            argumentsOfScenario.Add("Notes", notes);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I can identify illegal paths", null, tagsOfScenario, argumentsOfScenario);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
 testRunner.Given(string.Format("I have the following path: {0}", path), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 9
   testRunner.And("I\'m running on the following Operating System: Linux", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 10
  testRunner.When("I parse the path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 11
  testRunner.Then(string.Format("the parse status should be {0}", pathStatus), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
