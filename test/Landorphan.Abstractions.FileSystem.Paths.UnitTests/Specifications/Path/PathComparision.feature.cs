// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.4.0.0
//      SpecFlow Generator Version:3.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Landorphan.Abstractions.FileSystem.Paths.UnitTests.Specifications.Path
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Path Comparison")]
    [NUnit.Framework.CategoryAttribute("Check-In")]
    public partial class PathComparisonFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = new string[] {
                "Check-In"};
        
#line 1 "PathComparision.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Specifications/Path", "Path Comparison", "\tIn order to work with paths\r\n\tAs a developer\r\n\tI need to be able to compare two " +
                    "paths", ProgrammingLanguage.CSharp, new string[] {
                        "Check-In"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Comare two paths")]
        [NUnit.Framework.TestCaseAttribute("Linux", "(null)", "/A", "less than", "Sensitive", null)]
        [NUnit.Framework.TestCaseAttribute("Linux", "/a", "(null)", "greater than", "Sensitive", null)]
        [NUnit.Framework.TestCaseAttribute("Linux", "(null)", "(null)", "equal to", "Sensitive", null)]
        [NUnit.Framework.TestCaseAttribute("Linux", "/", "/", "equal to", "Sensitive", null)]
        [NUnit.Framework.TestCaseAttribute("Linux", "/a", "/b", "less than", "Sensitive", null)]
        [NUnit.Framework.TestCaseAttribute("Linux", "/b", "/a", "greater than", "Sensitive", null)]
        [NUnit.Framework.TestCaseAttribute("Linux", "/a", "/a", "equal to", "Sensitive", null)]
        [NUnit.Framework.TestCaseAttribute("Linux", "/A", "/a", "less than", "Sensitive", null)]
        [NUnit.Framework.TestCaseAttribute("Linux", "/a", "/A", "greater than", "Sensitive", null)]
        [NUnit.Framework.TestCaseAttribute("Linux", "/a", "/a", "equal to", "Insensitive", null)]
        [NUnit.Framework.TestCaseAttribute("Linux", "/A", "/a", "equal to", "Insensitive", null)]
        [NUnit.Framework.TestCaseAttribute("Linux", "/a", "/A", "equal to", "Insensitive", null)]
        [NUnit.Framework.TestCaseAttribute("Windows", "(null)", "/A", "less than", "Insensitive", null)]
        [NUnit.Framework.TestCaseAttribute("Windows", "/a", "(null)", "greater than", "Insensitive", null)]
        [NUnit.Framework.TestCaseAttribute("Windows", "(null)", "(null)", "equal to", "Insensitive", null)]
        [NUnit.Framework.TestCaseAttribute("Windows", "/", "/", "equal to", "Sensitive", null)]
        [NUnit.Framework.TestCaseAttribute("Windows", "/a", "/b", "less than", "Sensitive", null)]
        [NUnit.Framework.TestCaseAttribute("Windows", "/b", "/a", "greater than", "Sensitive", null)]
        [NUnit.Framework.TestCaseAttribute("Windows", "/a", "/a", "equal to", "Sensitive", null)]
        [NUnit.Framework.TestCaseAttribute("Windows", "/A", "/a", "less than", "Sensitive", null)]
        [NUnit.Framework.TestCaseAttribute("Windows", "/a", "/A", "greater than", "Sensitive", null)]
        [NUnit.Framework.TestCaseAttribute("Windows", "/a", "/a", "equal to", "Insensitive", null)]
        [NUnit.Framework.TestCaseAttribute("Windows", "/A", "/a", "equal to", "Insensitive", null)]
        [NUnit.Framework.TestCaseAttribute("Windows", "/a", "/A", "equal to", "Insensitive", null)]
        public virtual void ComareTwoPaths(string oS, string path1, string path2, string compareType, string comparer, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("OS", oS);
            argumentsOfScenario.Add("Path 1", path1);
            argumentsOfScenario.Add("Path 2", path2);
            argumentsOfScenario.Add("Compare Type", compareType);
            argumentsOfScenario.Add("Comparer", comparer);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Comare two paths", null, tagsOfScenario, argumentsOfScenario);
#line 9
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 10
 testRunner.Given(string.Format("I\'m running on the following Operating System: {0}", oS), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 11
   testRunner.And(string.Format("I parse the following as path 1: {0}", path1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 12
   testRunner.And(string.Format("I parse the following as path 2: {0}", path2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 13
  testRunner.When(string.Format("I compare the paths using the {0} comparer", comparer), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 14
  testRunner.Then(string.Format("path 1 should be {0} path 2", compareType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
