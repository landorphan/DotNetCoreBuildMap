// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.3.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Landorphan.Abstractions.FileSystem.Paths.UnitTests.Specifications.Path.Windows
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.3.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("WindowsPaths")]
    [NUnit.Framework.CategoryAttribute("Check-In")]
    public partial class WindowsPathsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = new string[] {
                "Check-In"};
        
#line 1 "WindowsPath.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "WindowsPaths", "\tIn order to reliably interact with the file systems of multiple platforms\r\n\tAs a" +
                    " developer\r\n\tI want to be able to parse paths on multiple platforms correctly", ProgrammingLanguage.CSharp, new string[] {
                        "Check-In"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Windows Paths")]
        [NUnit.Framework.TestCaseAttribute("Null", "(null)", "1", "{.} .", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "Relative", "Legal", "0", null)]
        [NUnit.Framework.TestCaseAttribute("Empty", "(empty)", "1", "{.} .", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "Relative", "Legal", "0", null)]
        [NUnit.Framework.TestCaseAttribute("Volume Absolute", "C:`", "2", "{R} C:", "{E} (empty)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "Absolute", "Legal", "0", null)]
        [NUnit.Framework.TestCaseAttribute("Volume Relative", "C:.`file.txt", "3", "{V} C:", "{.} .", "{G} file.txt", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "Relative", "Legal", "1", null)]
        [NUnit.Framework.TestCaseAttribute("UNC", "``server`share`dir`file.txt", "4", "{U} server", "{G} share", "{G} dir", "{G} file.txt", "{N} (null)", "{N} (null)", "{N} (null)", "Absolute", "Legal", "3", null)]
        [NUnit.Framework.TestCaseAttribute("Long Volume Abs", "``?`C:`dir`file.txt", "3", "{R} C:", "{G} dir", "{G} file.txt", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "Absolute", "Legal", "2", null)]
        [NUnit.Framework.TestCaseAttribute("Long UNC", "``?`UNC`server`share`dir`file.txt", "4", "{U} server", "{G} share", "{G} dir", "{G} file.txt", "{N} (null)", "{N} (null)", "{N} (null)", "Absolute", "Legal", "3", null)]
        [NUnit.Framework.TestCaseAttribute("Self Relative", ".`dir`file.txt", "3", "{.} .", "{G} dir", "{G} file.txt", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "Relative", "Legal", "2", null)]
        [NUnit.Framework.TestCaseAttribute("Parent Relative", "..`dir`file.txt", "3", "{..} ..", "{G} dir", "{G} file.txt", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "Relative", "Legal", "-1", null)]
        [NUnit.Framework.TestCaseAttribute("Empty Abs Segment", "C:`dir``file.txt", "4", "{R} C:", "{G} dir", "{E} (empty)", "{G} file.txt", "{N} (null)", "{N} (null)", "{N} (null)", "Absolute", "Legal", "2", null)]
        [NUnit.Framework.TestCaseAttribute("Empty Rel Segment", ".`dir``file.txt", "4", "{.} .", "{G} dir", "{E} (empty)", "{G} file.txt", "{N} (null)", "{N} (null)", "{N} (null)", "Relative", "Legal", "2", null)]
        [NUnit.Framework.TestCaseAttribute("Relative", "dir`file.txt", "2", "{G} dir", "{G} file.txt", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "Relative", "Legal", "2", null)]
        [NUnit.Framework.TestCaseAttribute("Neg Normal 2", "../../-1/0/1", "5", "{..} ..", "{..} ..", "{G} -1", "{G} 0", "{G} 1", "{N} (null)", "{N} (null)", "Relative", "Legal", "-2", null)]
        [NUnit.Framework.TestCaseAttribute("Neg Normal 1", "./../-1/0/1", "5", "{.} .", "{..} ..", "{G} -1", "{G} 0", "{G} 1", "{N} (null)", "{N} (null)", "Relative", "Legal", "-1", null)]
        [NUnit.Framework.TestCaseAttribute("CON", "CON", "1", "{D} CON", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "Absolute", "Legal", "0", null)]
        [NUnit.Framework.TestCaseAttribute("PRN", "PRN", "1", "{D} PRN", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "Absolute", "Legal", "0", null)]
        [NUnit.Framework.TestCaseAttribute("AUX", "AUX", "1", "{D} AUX", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "Absolute", "Legal", "0", null)]
        [NUnit.Framework.TestCaseAttribute("NUL", "NUL", "1", "{D} NUL", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "Absolute", "Legal", "0", null)]
        [NUnit.Framework.TestCaseAttribute("COM1", "COM1", "1", "{D} COM1", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "Absolute", "Legal", "0", null)]
        [NUnit.Framework.TestCaseAttribute("COM2", "COM2", "1", "{D} COM2", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "Absolute", "Legal", "0", null)]
        [NUnit.Framework.TestCaseAttribute("COM3", "COM3", "1", "{D} COM3", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "Absolute", "Legal", "0", null)]
        [NUnit.Framework.TestCaseAttribute("COM4", "COM4", "1", "{D} COM4", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "Absolute", "Legal", "0", null)]
        [NUnit.Framework.TestCaseAttribute("COM5", "COM5", "1", "{D} COM5", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "Absolute", "Legal", "0", null)]
        [NUnit.Framework.TestCaseAttribute("COM6", "COM6", "1", "{D} COM6", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "Absolute", "Legal", "0", null)]
        [NUnit.Framework.TestCaseAttribute("COM7", "COM7", "1", "{D} COM7", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "Absolute", "Legal", "0", null)]
        [NUnit.Framework.TestCaseAttribute("COM8", "COM8", "1", "{D} COM8", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "Absolute", "Legal", "0", null)]
        [NUnit.Framework.TestCaseAttribute("COM9", "COM9", "1", "{D} COM9", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "Absolute", "Legal", "0", null)]
        [NUnit.Framework.TestCaseAttribute("LPT1", "LPT1", "1", "{D} LPT1", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "Absolute", "Legal", "0", null)]
        [NUnit.Framework.TestCaseAttribute("LPT2", "LPT2", "1", "{D} LPT2", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "Absolute", "Legal", "0", null)]
        [NUnit.Framework.TestCaseAttribute("LPT3", "LPT3", "1", "{D} LPT3", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "Absolute", "Legal", "0", null)]
        [NUnit.Framework.TestCaseAttribute("LPT4", "LPT4", "1", "{D} LPT4", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "Absolute", "Legal", "0", null)]
        [NUnit.Framework.TestCaseAttribute("LPT5", "LPT5", "1", "{D} LPT5", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "Absolute", "Legal", "0", null)]
        [NUnit.Framework.TestCaseAttribute("LPT6", "LPT6", "1", "{D} LPT6", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "Absolute", "Legal", "0", null)]
        [NUnit.Framework.TestCaseAttribute("LPT7", "LPT7", "1", "{D} LPT7", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "Absolute", "Legal", "0", null)]
        [NUnit.Framework.TestCaseAttribute("LPT8", "LPT8", "1", "{D} LPT8", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "Absolute", "Legal", "0", null)]
        [NUnit.Framework.TestCaseAttribute("LPT9", "LPT9", "1", "{D} LPT9", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "Absolute", "Legal", "0", null)]
        [NUnit.Framework.TestCaseAttribute("Long CON", "``?`CON", "1", "{D} CON", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "Absolute", "Legal", "0", null)]
        [NUnit.Framework.TestCaseAttribute("Long PRN", "``?`PRN", "1", "{D} PRN", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "Absolute", "Legal", "0", null)]
        [NUnit.Framework.TestCaseAttribute("Long AUX", "``?`AUX", "1", "{D} AUX", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "Absolute", "Legal", "0", null)]
        [NUnit.Framework.TestCaseAttribute("Long NUL", "``?`NUL", "1", "{D} NUL", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "Absolute", "Legal", "0", null)]
        [NUnit.Framework.TestCaseAttribute("Long COM1", "``?`COM1", "1", "{D} COM1", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "Absolute", "Legal", "0", null)]
        [NUnit.Framework.TestCaseAttribute("Long COM2", "``?`COM2", "1", "{D} COM2", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "Absolute", "Legal", "0", null)]
        [NUnit.Framework.TestCaseAttribute("Long COM3", "``?`COM3", "1", "{D} COM3", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "Absolute", "Legal", "0", null)]
        [NUnit.Framework.TestCaseAttribute("Long COM4", "``?`COM4", "1", "{D} COM4", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "Absolute", "Legal", "0", null)]
        [NUnit.Framework.TestCaseAttribute("Long COM5", "``?`COM5", "1", "{D} COM5", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "Absolute", "Legal", "0", null)]
        [NUnit.Framework.TestCaseAttribute("Long COM6", "``?`COM6", "1", "{D} COM6", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "Absolute", "Legal", "0", null)]
        [NUnit.Framework.TestCaseAttribute("Long COM7", "``?`COM7", "1", "{D} COM7", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "Absolute", "Legal", "0", null)]
        [NUnit.Framework.TestCaseAttribute("Long COM8", "``?`COM8", "1", "{D} COM8", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "Absolute", "Legal", "0", null)]
        [NUnit.Framework.TestCaseAttribute("Long COM9", "``?`COM9", "1", "{D} COM9", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "Absolute", "Legal", "0", null)]
        [NUnit.Framework.TestCaseAttribute("Long LPT1", "``?`LPT1", "1", "{D} LPT1", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "Absolute", "Legal", "0", null)]
        [NUnit.Framework.TestCaseAttribute("Long LPT2", "``?`LPT2", "1", "{D} LPT2", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "Absolute", "Legal", "0", null)]
        [NUnit.Framework.TestCaseAttribute("Long LPT3", "``?`LPT3", "1", "{D} LPT3", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "Absolute", "Legal", "0", null)]
        [NUnit.Framework.TestCaseAttribute("Long LPT4", "``?`LPT4", "1", "{D} LPT4", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "Absolute", "Legal", "0", null)]
        [NUnit.Framework.TestCaseAttribute("Long LPT5", "``?`LPT5", "1", "{D} LPT5", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "Absolute", "Legal", "0", null)]
        [NUnit.Framework.TestCaseAttribute("Long LPT6", "``?`LPT6", "1", "{D} LPT6", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "Absolute", "Legal", "0", null)]
        [NUnit.Framework.TestCaseAttribute("Long LPT7", "``?`LPT7", "1", "{D} LPT7", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "Absolute", "Legal", "0", null)]
        [NUnit.Framework.TestCaseAttribute("Long LPT8", "``?`LPT8", "1", "{D} LPT8", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "Absolute", "Legal", "0", null)]
        [NUnit.Framework.TestCaseAttribute("Long LPT9", "``?`LPT9", "1", "{D} LPT9", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "Absolute", "Legal", "0", null)]
        [NUnit.Framework.TestCaseAttribute("Rel CON", "..`.`CON", "3", "{..} ..", "{.} .", "{D} CON", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "Absolute", "Legal", "0", null)]
        [NUnit.Framework.TestCaseAttribute("Abs Con", "C:`CON", "2", "{R} C:", "{D} CON", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "Absolute", "Legal", "0", null)]
        [NUnit.Framework.TestCaseAttribute("Volume CON", "CON:", "1", "{D} CON", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "Absolute", "Legal", "0", null)]
        [NUnit.Framework.TestCaseAttribute("Discuraged Rel NUL", ".`NUL.txt", "2", "{.} .", "{G} NUL.txt", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "Relative", "Discouraged", "1", null)]
        [NUnit.Framework.TestCaseAttribute("Illegal Rel Astr", ".`foo*bar.txt", "2", "{.} .", "{G} foo*bar.txt", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "Relative", "Illegal", "1", null)]
        [NUnit.Framework.TestCaseAttribute("Illegal Rel Ques", ".`foo?bar.txt", "2", "{.} .", "{G} foo?bar.txt", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "Relative", "Illegal", "1", null)]
        [NUnit.Framework.TestCaseAttribute("Illegal Rel Colon", ".`foo:bar.txt", "3", "{.} .", "{V} foo:", "{G} bar.txt", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "Relative", "Illegal", "1", null)]
        [NUnit.Framework.TestCaseAttribute("Space Ending", ".`test.txt%20", "2", "{.} .", "{G} test.txt%20", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "Relative", "Illegal", "1", null)]
        [NUnit.Framework.TestCaseAttribute("Space Both", ".`%20t.txt%20", "2", "{.} .", "{G} %20t.txt%20", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "Relative", "Illegal", "1", null)]
        [NUnit.Framework.TestCaseAttribute("Period Ending", ".`test.", "2", "{.} .", "{G} test.", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "Relative", "Illegal", "1", null)]
        [NUnit.Framework.TestCaseAttribute("Space Beginning", ".`%20test.txt", "2", "{.} .", "{G} %20test.txt", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "{N} (null)", "Relative", "Discouraged", "1", null)]
        [NUnit.Framework.TestCaseAttribute("Neg Back Reference", "a/b/../../../e", "6", "{G} a", "{G} b", "{..} ..", "{..} ..", "{..} ..", "{G} e", "{N} (null)", "Relative", "Legal", "-1", null)]
        [NUnit.Framework.TestCaseAttribute("Neg Back Reference 2", "a/b/../../../e/", "7", "{G} a", "{G} b", "{..} ..", "{..} ..", "{..} ..", "{G} e", "{E} (empty)", "Relative", "Legal", "-1", null)]
        [NUnit.Framework.TestCaseAttribute("Root Pos Back", "/a/b/../c/../e", "7", "{/}", "{G} a", "{G} b", "{..} ..", "{G} c", "{..} ..", "{G} e", "Absolute", "Legal", "2", null)]
        [NUnit.Framework.TestCaseAttribute("Root Neg Back", "/a/b/../../../e", "7", "{/}", "{G} a", "{G} b", "{..} ..", "{..} ..", "{..} ..", "{G} e", "Absolute", "Legal", "-1", null)]
        [NUnit.Framework.TestCaseAttribute("Root Neg Back 2", "/a/../../e/", "6", "{/}", "{G} a", "{..} ..", "{..} ..", "{G} e", "{E} (empty)", "{N} (null)", "Absolute", "Legal", "-1", null)]
        [NUnit.Framework.TestCaseAttribute("Vol Abs Neg Back", "C:/a/../../b/../c", "7", "{R} C:", "{G} a", "{..} ..", "{..} ..", "{G} b", "{..} ..", "{G} c", "Absolute", "Legal", "-1", null)]
        [NUnit.Framework.TestCaseAttribute("Vol Root Zero Back", "C:/a/../b/..", "5", "{R} C:", "{G} a", "{..} ..", "{G} b", "{..} ..", "{N} (null)", "{N} (null)", "Absolute", "Legal", "0", null)]
        [NUnit.Framework.TestCaseAttribute("Vol Root Pos Back", "C:/a/../b/../c", "6", "{R} C:", "{G} a", "{..} ..", "{G} b", "{..} ..", "{G} c", "{N} (null)", "Absolute", "Legal", "1", null)]
        [NUnit.Framework.TestCaseAttribute("Vol Double Root", "C:/C:/dir/dir/file.txt", "5", "{R} C:", "{R} C:", "{G} dir", "{G} dir", "{G} file.txt", "{N} (null)", "{N} (null)", "Absolute", "Illegal", "3", null)]
        public virtual void WindowsPaths(string name, string path, string length, string segment0, string segment1, string segment2, string segment3, string segment4, string segment5, string segment6, string anchor, string status, string normDepth, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Name", name);
            argumentsOfScenario.Add("Path", path);
            argumentsOfScenario.Add("Length", length);
            argumentsOfScenario.Add("Segment 0", segment0);
            argumentsOfScenario.Add("Segment 1", segment1);
            argumentsOfScenario.Add("Segment 2", segment2);
            argumentsOfScenario.Add("Segment 3", segment3);
            argumentsOfScenario.Add("Segment 4", segment4);
            argumentsOfScenario.Add("Segment 5", segment5);
            argumentsOfScenario.Add("Segment 6", segment6);
            argumentsOfScenario.Add("Anchor", anchor);
            argumentsOfScenario.Add("Status", status);
            argumentsOfScenario.Add("Norm Depth", normDepth);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Windows Paths", null, tagsOfScenario, argumentsOfScenario);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
 testRunner.Given(string.Format("I have the following path: {0}", path), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 9
   testRunner.And("I\'m running on the following Operating System: Windows", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 10
  testRunner.When("I parse the path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 11
      testRunner.And("I evaluate the original form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 12
  testRunner.Then("I should receive a path object", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 13
   testRunner.And(string.Format("segment \'0\' should be: {0}", segment0), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 14
   testRunner.And(string.Format("segment \'1\' should be: {0}", segment1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 15
   testRunner.And(string.Format("segment \'2\' should be: {0}", segment2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 16
   testRunner.And(string.Format("segment \'3\' should be: {0}", segment3), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 17
   testRunner.And(string.Format("segment \'4\' should be: {0}", segment4), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 18
   testRunner.And(string.Format("segment \'5\' should be: {0}", segment5), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 19
   testRunner.And(string.Format("segment \'6\' should be: {0}", segment6), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 20
   testRunner.And(string.Format("the parse path should be anchored to {0}", anchor), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 21
   testRunner.And(string.Format("the parse status should be {0}", status), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 22
   testRunner.And(string.Format("the segment length should be {0}", length), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 23
   testRunner.And("the PathType should be Windows", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 24
   testRunner.And(string.Format("the normalization depth should be: {0}", normDepth), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
