// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.3.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Landorphan.Abstractions.FileSystem.Paths.UnitTests.Specifications.Path
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.3.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Segment Manipulation")]
    [NUnit.Framework.CategoryAttribute("Check-In")]
    public partial class SegmentManipulationFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = new string[] {
                "Check-In"};
        
#line 1 "SegmentManipulation.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Segment Manipulation", "\tIn order to develop applications that access the file system.\r\n\tAs a Landorphan " +
                    "OSS consumer\r\n\tI want to to be able to manipulate the segments in a path ", ProgrammingLanguage.CSharp, new string[] {
                        "Check-In"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("I can insert and append segments to any point in a path")]
        [NUnit.Framework.TestCaseAttribute("a`b`c", "Windows", "{G} 0", "0", "insert before", "0`a`b`c", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("a`b`c", "Windows", "{G} 0", "0", "append after", "a`0`b`c", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("a`b`c", "Windows", "{G} 0", "2", "insert before", "a`b`0`c", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("a`b`c", "Windows", "{G} 0", "2", "append after", "a`b`c`0", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("a`b`c", "Windows", "{G} 0", "9", "insert before", "a`b`c`0", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("a`b`c", "Windows", "{G} 0", "9", "append after", "a`b`c`0", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:`a`b`c", "Windows", "{G} 0", "0", "insert before", "0`C:`a`b`c", "Leading \'{R} C:`\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:`a`b`c", "Windows", "{G} 0", "0", "append after", "C:`0`a`b`c", "Leading \'{R} C:`\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:`a`b`c", "Windows", "{G} 0", "3", "insert before", "C:`a`b`0`c", "Leading \'{R} C:`\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:`a`b`c", "Windows", "{G} 0", "3", "append after", "C:`a`b`c`0", "Leading \'{R} C:`\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:`a`b`c", "Windows", "{G} 0", "9", "insert before", "C:`a`b`c`0", "Leading \'{R} C:`\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:`a`b`c", "Windows", "{G} 0", "9", "append after", "C:`a`b`c`0", "Leading \'{R} C:`\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a`b`c", "Windows", "{G} 0", "0", "insert before", "0`C:a`b`c", "Leading \'{V} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a`b`c", "Windows", "{G} 0", "0", "append after", "C:0`a`b`c", "Leading \'{V} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a`b`c", "Windows", "{G} 0", "3", "insert before", "C:a`b`0`c", "Leading \'{V} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a`b`c", "Windows", "{G} 0", "3", "append after", "C:a`b`c`0", "Leading \'{V} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a`b`c", "Windows", "{G} 0", "9", "insert before", "C:a`b`c`0", "Leading \'{V} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a`b`c", "Windows", "{G} 0", "9", "append after", "C:a`b`c`0", "Leading \'{V} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("`a`b`c", "Windows", "{G} 0", "0", "insert before", "0``a`b`c", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("`a`b`c", "Windows", "{G} 0", "0", "append after", "`0`a`b`c", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("`a`b`c", "Windows", "{G} 0", "3", "insert before", "`a`b`0`c", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("`a`b`c", "Windows", "{G} 0", "3", "append after", "`a`b`c`0", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("`a`b`c", "Windows", "{G} 0", "9", "insert before", "`a`b`c`0", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("`a`b`c", "Windows", "{G} 0", "9", "append after", "`a`b`c`0", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("``a`b`c", "Windows", "{G} 0", "0", "insert before", "0```a`b`c", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("``a`b`c", "Windows", "{G} 0", "0", "append after", "``a`0`b`c", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("``a`b`c", "Windows", "{G} 0", "2", "insert before", "``a`b`0`c", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("``a`b`c", "Windows", "{G} 0", "2", "append after", "``a`b`c`0", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("``a`b`c", "Windows", "{G} 0", "9", "insert before", "``a`b`c`0", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("``a`b`c", "Windows", "{G} 0", "9", "append after", "``a`b`c`0", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("(empty)", "Windows", "{G} 0", "0", "insert before", "0`.", "Leading \'{E}\' - Notice how \'{E}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(empty)", "Windows", "{G} 0", "0", "append after", ".`0", "Leading \'{E}\' - Notice how \'{E}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(empty)", "Windows", "{G} 0", "9", "insert before", ".`0", "Leading \'{E}\' - Notice how \'{E}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(empty)", "Windows", "{G} 0", "9", "append after", ".`0", "Leading \'{E}\' - Notice how \'{E}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(null)", "Windows", "{G} 0", "0", "insert before", "0`.", "Leading \'{E}\' - Notice how \'{0}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(null)", "Windows", "{G} 0", "0", "append after", ".`0", "Leading \'{E}\' - Notice how \'{0}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(null)", "Windows", "{G} 0", "9", "insert before", ".`0", "Leading \'{E}\' - Notice how \'{0}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(null)", "Windows", "{G} 0", "9", "append after", ".`0", "Leading \'{E}\' - Notice how \'{0}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute(".", "Windows", "{G} 0", "0", "insert before", "0`.", "Leading \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute(".", "Windows", "{G} 0", "0", "append after", ".`0", "Leading \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute(".", "Windows", "{G} 0", "9", "insert before", ".`0", "Leading \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute(".", "Windows", "{G} 0", "9", "append after", ".`0", "Leading \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("..", "Windows", "{G} 0", "0", "insert before", "0`..", "Leading \'..\'", null)]
        [NUnit.Framework.TestCaseAttribute("..", "Windows", "{G} 0", "0", "append after", "..`0", "Leading \'..\'", null)]
        [NUnit.Framework.TestCaseAttribute("..", "Windows", "{G} 0", "9", "insert before", "..`0", "Leading \'..\'", null)]
        [NUnit.Framework.TestCaseAttribute("..", "Windows", "{G} 0", "9", "append after", "..`0", "Leading \'..\'", null)]
        [NUnit.Framework.TestCaseAttribute("a`b`c", "Windows", "{S} .", "0", "insert before", ".`a`b`c", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("a`b`c", "Windows", "{S} .", "0", "append after", "a`.`b`c", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("a`b`c", "Windows", "{S} .", "2", "insert before", "a`b`.`c", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("a`b`c", "Windows", "{S} .", "2", "append after", "a`b`c`.", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("a`b`c", "Windows", "{S} .", "9", "insert before", "a`b`c`.", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("a`b`c", "Windows", "{S} .", "9", "append after", "a`b`c`.", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:`a`b`c", "Windows", "{S} .", "0", "insert before", ".`C:`a`b`c", "Leading \'{R} C:`\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:`a`b`c", "Windows", "{S} .", "0", "append after", "C:`.`a`b`c", "Leading \'{R} C:`\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:`a`b`c", "Windows", "{S} .", "3", "insert before", "C:`a`b`.`c", "Leading \'{R} C:`\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:`a`b`c", "Windows", "{S} .", "3", "append after", "C:`a`b`c`.", "Leading \'{R} C:`\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:`a`b`c", "Windows", "{S} .", "9", "insert before", "C:`a`b`c`.", "Leading \'{R} C:`\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:`a`b`c", "Windows", "{S} .", "9", "append after", "C:`a`b`c`.", "Leading \'{R} C:`\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a`b`c", "Windows", "{S} .", "0", "insert before", ".`C:a`b`c", "Leading \'{V} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a`b`c", "Windows", "{S} .", "0", "append after", "C:.`a`b`c", "Leading \'{V} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a`b`c", "Windows", "{S} .", "3", "insert before", "C:a`b`.`c", "Leading \'{V} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a`b`c", "Windows", "{S} .", "3", "append after", "C:a`b`c`.", "Leading \'{V} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a`b`c", "Windows", "{S} .", "9", "insert before", "C:a`b`c`.", "Leading \'{V} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a`b`c", "Windows", "{S} .", "9", "append after", "C:a`b`c`.", "Leading \'{V} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("`a`b`c", "Windows", "{S} .", "0", "insert before", ".``a`b`c", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("`a`b`c", "Windows", "{S} .", "0", "append after", "`.`a`b`c", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("`a`b`c", "Windows", "{S} .", "3", "insert before", "`a`b`.`c", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("`a`b`c", "Windows", "{S} .", "3", "append after", "`a`b`c`.", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("`a`b`c", "Windows", "{S} .", "9", "insert before", "`a`b`c`.", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("`a`b`c", "Windows", "{S} .", "9", "append after", "`a`b`c`.", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("``a`b`c", "Windows", "{S} .", "0", "insert before", ".```a`b`c", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("``a`b`c", "Windows", "{S} .", "0", "append after", "``a`.`b`c", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("``a`b`c", "Windows", "{S} .", "2", "insert before", "``a`b`.`c", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("``a`b`c", "Windows", "{S} .", "2", "append after", "``a`b`c`.", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("``a`b`c", "Windows", "{S} .", "9", "insert before", "``a`b`c`.", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("``a`b`c", "Windows", "{S} .", "9", "append after", "``a`b`c`.", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("(empty)", "Windows", "{S} .", "0", "insert before", ".`.", "Leading \'{E}\' - Notice how \'{E}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(empty)", "Windows", "{S} .", "0", "append after", ".`.", "Leading \'{E}\' - Notice how \'{E}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(empty)", "Windows", "{S} .", "9", "insert before", ".`.", "Leading \'{E}\' - Notice how \'{E}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(empty)", "Windows", "{S} .", "9", "append after", ".`.", "Leading \'{E}\' - Notice how \'{E}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(null)", "Windows", "{S} .", "0", "insert before", ".`.", "Leading \'{E}\' - Notice how \'{0}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(null)", "Windows", "{S} .", "0", "append after", ".`.", "Leading \'{E}\' - Notice how \'{0}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(null)", "Windows", "{S} .", "9", "insert before", ".`.", "Leading \'{E}\' - Notice how \'{0}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(null)", "Windows", "{S} .", "9", "append after", ".`.", "Leading \'{E}\' - Notice how \'{0}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute(".", "Windows", "{S} .", "0", "insert before", ".`.", "Leading \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute(".", "Windows", "{S} .", "0", "append after", ".`.", "Leading \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute(".", "Windows", "{S} .", "9", "insert before", ".`.", "Leading \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute(".", "Windows", "{S} .", "9", "append after", ".`.", "Leading \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("..", "Windows", "{S} .", "0", "insert before", ".`..", "Leading \'..\'", null)]
        [NUnit.Framework.TestCaseAttribute("..", "Windows", "{S} .", "0", "append after", "..`.", "Leading \'..\'", null)]
        [NUnit.Framework.TestCaseAttribute("..", "Windows", "{S} .", "9", "insert before", "..`.", "Leading \'..\'", null)]
        [NUnit.Framework.TestCaseAttribute("..", "Windows", "{S} .", "9", "append after", "..`.", "Leading \'..\'", null)]
        [NUnit.Framework.TestCaseAttribute("a`b`c", "Windows", "{P} ..", "0", "insert before", "..`a`b`c", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("a`b`c", "Windows", "{P} ..", "0", "append after", "a`..`b`c", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("a`b`c", "Windows", "{P} ..", "2", "insert before", "a`b`..`c", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("a`b`c", "Windows", "{P} ..", "2", "append after", "a`b`c`..", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("a`b`c", "Windows", "{P} ..", "9", "insert before", "a`b`c`..", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("a`b`c", "Windows", "{P} ..", "9", "append after", "a`b`c`..", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:`a`b`c", "Windows", "{P} ..", "0", "insert before", "..`C:`a`b`c", "Leading \'{R} C:`\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:`a`b`c", "Windows", "{P} ..", "0", "append after", "C:`..`a`b`c", "Leading \'{R} C:`\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:`a`b`c", "Windows", "{P} ..", "3", "insert before", "C:`a`b`..`c", "Leading \'{R} C:`\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:`a`b`c", "Windows", "{P} ..", "3", "append after", "C:`a`b`c`..", "Leading \'{R} C:`\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:`a`b`c", "Windows", "{P} ..", "9", "insert before", "C:`a`b`c`..", "Leading \'{R} C:`\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:`a`b`c", "Windows", "{P} ..", "9", "append after", "C:`a`b`c`..", "Leading \'{R} C:`\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a`b`c", "Windows", "{P} ..", "0", "insert before", "..`C:a`b`c", "Leading \'{V} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a`b`c", "Windows", "{P} ..", "0", "append after", "C:..`a`b`c", "Leading \'{V} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a`b`c", "Windows", "{P} ..", "3", "insert before", "C:a`b`..`c", "Leading \'{V} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a`b`c", "Windows", "{P} ..", "3", "append after", "C:a`b`c`..", "Leading \'{V} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a`b`c", "Windows", "{P} ..", "9", "insert before", "C:a`b`c`..", "Leading \'{V} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a`b`c", "Windows", "{P} ..", "9", "append after", "C:a`b`c`..", "Leading \'{V} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("`a`b`c", "Windows", "{P} ..", "0", "insert before", "..``a`b`c", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("`a`b`c", "Windows", "{P} ..", "0", "append after", "`..`a`b`c", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("`a`b`c", "Windows", "{P} ..", "3", "insert before", "`a`b`..`c", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("`a`b`c", "Windows", "{P} ..", "3", "append after", "`a`b`c`..", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("`a`b`c", "Windows", "{P} ..", "9", "insert before", "`a`b`c`..", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("`a`b`c", "Windows", "{P} ..", "9", "append after", "`a`b`c`..", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("``a`b`c", "Windows", "{P} ..", "0", "insert before", "..```a`b`c", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("``a`b`c", "Windows", "{P} ..", "0", "append after", "``a`..`b`c", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("``a`b`c", "Windows", "{P} ..", "2", "insert before", "``a`b`..`c", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("``a`b`c", "Windows", "{P} ..", "2", "append after", "``a`b`c`..", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("``a`b`c", "Windows", "{P} ..", "9", "insert before", "``a`b`c`..", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("``a`b`c", "Windows", "{P} ..", "9", "append after", "``a`b`c`..", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("(empty)", "Windows", "{P} ..", "0", "insert before", "..`.", "Leading \'{E}\' - Notice how \'{E}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(empty)", "Windows", "{P} ..", "0", "append after", ".`..", "Leading \'{E}\' - Notice how \'{E}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(empty)", "Windows", "{P} ..", "9", "insert before", ".`..", "Leading \'{E}\' - Notice how \'{E}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(empty)", "Windows", "{P} ..", "9", "append after", ".`..", "Leading \'{E}\' - Notice how \'{E}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(null)", "Windows", "{P} ..", "0", "insert before", "..`.", "Leading \'{E}\' - Notice how \'{0}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(null)", "Windows", "{P} ..", "0", "append after", ".`..", "Leading \'{E}\' - Notice how \'{0}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(null)", "Windows", "{P} ..", "9", "insert before", ".`..", "Leading \'{E}\' - Notice how \'{0}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(null)", "Windows", "{P} ..", "9", "append after", ".`..", "Leading \'{E}\' - Notice how \'{0}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute(".", "Windows", "{P} ..", "0", "insert before", "..`.", "Leading \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute(".", "Windows", "{P} ..", "0", "append after", ".`..", "Leading \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute(".", "Windows", "{P} ..", "9", "insert before", ".`..", "Leading \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute(".", "Windows", "{P} ..", "9", "append after", ".`..", "Leading \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("..", "Windows", "{P} ..", "0", "insert before", "..`..", "Leading \'..\'", null)]
        [NUnit.Framework.TestCaseAttribute("..", "Windows", "{P} ..", "0", "append after", "..`..", "Leading \'..\'", null)]
        [NUnit.Framework.TestCaseAttribute("..", "Windows", "{P} ..", "9", "insert before", "..`..", "Leading \'..\'", null)]
        [NUnit.Framework.TestCaseAttribute("..", "Windows", "{P} ..", "9", "append after", "..`..", "Leading \'..\'", null)]
        [NUnit.Framework.TestCaseAttribute("a`b`c", "Windows", "{E}", "0", "insert before", "`a`b`c", "Leading \'{G} a\'   NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("a`b`c", "Windows", "{E}", "0", "append after", "a``b`c", "Leading \'{G} a\'   NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("a`b`c", "Windows", "{E}", "2", "insert before", "a`b``c", "Leading \'{G} a\'   NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("a`b`c", "Windows", "{E}", "2", "append after", "a`b`c`", "Leading \'{G} a\'   NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("a`b`c", "Windows", "{E}", "9", "insert before", "a`b`c`", "Leading \'{G} a\'   NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("a`b`c", "Windows", "{E}", "9", "append after", "a`b`c`", "Leading \'{G} a\'   NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:`a`b`c", "Windows", "{E}", "0", "insert before", "`C:`a`b`c", "Leading \'{R} C:`\' NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:`a`b`c", "Windows", "{E}", "0", "append after", "C:``a`b`c", "Leading \'{R} C:`\' NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:`a`b`c", "Windows", "{E}", "3", "insert before", "C:`a`b``c", "Leading \'{R} C:`\' NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:`a`b`c", "Windows", "{E}", "3", "append after", "C:`a`b`c`", "Leading \'{R} C:`\' NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:`a`b`c", "Windows", "{E}", "9", "insert before", "C:`a`b`c`", "Leading \'{R} C:`\' NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:`a`b`c", "Windows", "{E}", "9", "append after", "C:`a`b`c`", "Leading \'{R} C:`\' NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a`b`c", "Windows", "{E}", "0", "insert before", "`C:a`b`c", "Leading \'{V} C:\'  NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a`b`c", "Windows", "{E}", "0", "append after", "C:`a`b`c", "Leading \'{V} C:\'  NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a`b`c", "Windows", "{E}", "3", "insert before", "C:a`b``c", "Leading \'{V} C:\'  NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a`b`c", "Windows", "{E}", "3", "append after", "C:a`b`c`", "Leading \'{V} C:\'  NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a`b`c", "Windows", "{E}", "9", "insert before", "C:a`b`c`", "Leading \'{V} C:\'  NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a`b`c", "Windows", "{E}", "9", "append after", "C:a`b`c`", "Leading \'{V} C:\'  NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("`a`b`c", "Windows", "{E}", "0", "insert before", "``a`b`c", "Leading \'{$} a\'   NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("`a`b`c", "Windows", "{E}", "0", "append after", "``a`b`c", "Leading \'{$} a\'   NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("`a`b`c", "Windows", "{E}", "3", "insert before", "`a`b``c", "Leading \'{$} a\'   NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("`a`b`c", "Windows", "{E}", "3", "append after", "`a`b`c`", "Leading \'{$} a\'   NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("`a`b`c", "Windows", "{E}", "9", "insert before", "`a`b`c`", "Leading \'{$} a\'   NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("`a`b`c", "Windows", "{E}", "9", "append after", "`a`b`c`", "Leading \'{$} a\'   NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("``a`b`c", "Windows", "{E}", "0", "insert before", "```a`b`c", "Leading \'{X} a\'   NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("``a`b`c", "Windows", "{E}", "0", "append after", "``a``b`c", "Leading \'{X} a\'   NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("``a`b`c", "Windows", "{E}", "2", "insert before", "``a`b``c", "Leading \'{X} a\'   NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("``a`b`c", "Windows", "{E}", "2", "append after", "``a`b`c`", "Leading \'{X} a\'   NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("``a`b`c", "Windows", "{E}", "9", "insert before", "``a`b`c`", "Leading \'{X} a\'   NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("``a`b`c", "Windows", "{E}", "9", "append after", "``a`b`c`", "Leading \'{X} a\'   NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("(empty)", "Windows", "{E}", "0", "insert before", "`.", "Leading \'{E}\'     NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("(empty)", "Windows", "{E}", "0", "append after", ".`", "Leading \'{E}\'     NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("(empty)", "Windows", "{E}", "9", "insert before", ".`", "Leading \'{E}\'     NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("(empty)", "Windows", "{E}", "9", "append after", ".`", "Leading \'{E}\'     NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("(null)", "Windows", "{E}", "0", "insert before", "`.", "Leading \'{E}\'     NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("(null)", "Windows", "{E}", "0", "append after", ".`", "Leading \'{E}\'     NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("(null)", "Windows", "{E}", "9", "insert before", ".`", "Leading \'{E}\'     NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("(null)", "Windows", "{E}", "9", "append after", ".`", "Leading \'{E}\'     NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute(".", "Windows", "{E}", "0", "insert before", "`.", "Leading \'.\'       NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute(".", "Windows", "{E}", "0", "append after", ".`", "Leading \'.\'       NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute(".", "Windows", "{E}", "9", "insert before", ".`", "Leading \'.\'       NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute(".", "Windows", "{E}", "9", "append after", ".`", "Leading \'.\'       NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("..", "Windows", "{E}", "0", "insert before", "`..", "Leading \'..\'      NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("..", "Windows", "{E}", "0", "append after", "..`", "Leading \'..\'      NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("..", "Windows", "{E}", "9", "insert before", "..`", "Leading \'..\'      NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("..", "Windows", "{E}", "9", "append after", "..`", "Leading \'..\'      NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("a`b`c", "Windows", "{0}", "0", "insert before", "`a`b`c", "Leading \'{G} a\'   NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("a`b`c", "Windows", "{0}", "0", "append after", "a``b`c", "Leading \'{G} a\'   NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("a`b`c", "Windows", "{0}", "2", "insert before", "a`b``c", "Leading \'{G} a\'   NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("a`b`c", "Windows", "{0}", "2", "append after", "a`b`c`", "Leading \'{G} a\'   NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("a`b`c", "Windows", "{0}", "9", "insert before", "a`b`c`", "Leading \'{G} a\'   NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("a`b`c", "Windows", "{0}", "9", "append after", "a`b`c`", "Leading \'{G} a\'   NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:`a`b`c", "Windows", "{0}", "0", "insert before", "`C:`a`b`c", "Leading \'{R} C:`\' NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:`a`b`c", "Windows", "{0}", "0", "append after", "C:``a`b`c", "Leading \'{R} C:`\' NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:`a`b`c", "Windows", "{0}", "3", "insert before", "C:`a`b``c", "Leading \'{R} C:`\' NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:`a`b`c", "Windows", "{0}", "3", "append after", "C:`a`b`c`", "Leading \'{R} C:`\' NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:`a`b`c", "Windows", "{0}", "9", "insert before", "C:`a`b`c`", "Leading \'{R} C:`\' NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:`a`b`c", "Windows", "{0}", "9", "append after", "C:`a`b`c`", "Leading \'{R} C:`\' NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a`b`c", "Windows", "{0}", "0", "insert before", "`C:a`b`c", "Leading \'{V} C:\'  NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a`b`c", "Windows", "{0}", "0", "append after", "C:`a`b`c", "Leading \'{V} C:\'  NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a`b`c", "Windows", "{0}", "3", "insert before", "C:a`b``c", "Leading \'{V} C:\'  NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a`b`c", "Windows", "{0}", "3", "append after", "C:a`b`c`", "Leading \'{V} C:\'  NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a`b`c", "Windows", "{0}", "9", "insert before", "C:a`b`c`", "Leading \'{V} C:\'  NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a`b`c", "Windows", "{0}", "9", "append after", "C:a`b`c`", "Leading \'{V} C:\'  NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("`a`b`c", "Windows", "{0}", "0", "insert before", "``a`b`c", "Leading \'{$} a\'   NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("`a`b`c", "Windows", "{0}", "0", "append after", "``a`b`c", "Leading \'{$} a\'   NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("`a`b`c", "Windows", "{0}", "3", "insert before", "`a`b``c", "Leading \'{$} a\'   NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("`a`b`c", "Windows", "{0}", "3", "append after", "`a`b`c`", "Leading \'{$} a\'   NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("`a`b`c", "Windows", "{0}", "9", "insert before", "`a`b`c`", "Leading \'{$} a\'   NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("`a`b`c", "Windows", "{0}", "9", "append after", "`a`b`c`", "Leading \'{$} a\'   NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("``a`b`c", "Windows", "{0}", "0", "insert before", "```a`b`c", "Leading \'{X} a\'   NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("``a`b`c", "Windows", "{0}", "0", "append after", "``a``b`c", "Leading \'{X} a\'   NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("``a`b`c", "Windows", "{0}", "2", "insert before", "``a`b``c", "Leading \'{X} a\'   NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("``a`b`c", "Windows", "{0}", "2", "append after", "``a`b`c`", "Leading \'{X} a\'   NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("``a`b`c", "Windows", "{0}", "9", "insert before", "``a`b`c`", "Leading \'{X} a\'   NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("``a`b`c", "Windows", "{0}", "9", "append after", "``a`b`c`", "Leading \'{X} a\'   NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("(empty)", "Windows", "{0}", "0", "insert before", "`.", "Leading \'{E}\'     NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("(empty)", "Windows", "{0}", "0", "append after", ".`", "Leading \'{E}\'     NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("(empty)", "Windows", "{0}", "9", "insert before", ".`", "Leading \'{E}\'     NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("(empty)", "Windows", "{0}", "9", "append after", ".`", "Leading \'{E}\'     NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("(null)", "Windows", "{0}", "0", "insert before", "`.", "Leading \'{E}\'     NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("(null)", "Windows", "{0}", "0", "append after", ".`", "Leading \'{E}\'     NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("(null)", "Windows", "{0}", "9", "insert before", ".`", "Leading \'{E}\'     NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("(null)", "Windows", "{0}", "9", "append after", ".`", "Leading \'{E}\'     NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute(".", "Windows", "{0}", "0", "insert before", "`.", "Leading \'.\'       NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute(".", "Windows", "{0}", "0", "append after", ".`", "Leading \'.\'       NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute(".", "Windows", "{0}", "9", "insert before", ".`", "Leading \'.\'       NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute(".", "Windows", "{0}", "9", "append after", ".`", "Leading \'.\'       NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("..", "Windows", "{0}", "0", "insert before", "`..", "Leading \'..\'      NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("..", "Windows", "{0}", "0", "append after", "..`", "Leading \'..\'      NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("..", "Windows", "{0}", "9", "insert before", "..`", "Leading \'..\'      NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("..", "Windows", "{0}", "9", "append after", "..`", "Leading \'..\'      NOTE: Because the segment is created by caller, it is not turne" +
            "d into \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("a`b`c", "Windows", "{V} C", "0", "insert before", "C:a`b`c", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("a`b`c", "Windows", "{V} C", "0", "append after", "a`C:b`c", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("a`b`c", "Windows", "{V} C", "2", "insert before", "a`b`C:c", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("a`b`c", "Windows", "{V} C", "2", "append after", "a`b`c`C:", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("a`b`c", "Windows", "{V} C", "9", "insert before", "a`b`c`C:", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("a`b`c", "Windows", "{V} C", "9", "append after", "a`b`c`C:", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:`a`b`c", "Windows", "{V} C", "0", "insert before", "C:C:`a`b`c", "Leading \'{R} C:`\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:`a`b`c", "Windows", "{V} C", "0", "append after", "C:`C:a`b`c", "Leading \'{R} C:`\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:`a`b`c", "Windows", "{V} C", "3", "insert before", "C:`a`b`C:c", "Leading \'{R} C:`\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:`a`b`c", "Windows", "{V} C", "3", "append after", "C:`a`b`c`C:", "Leading \'{R} C:`\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:`a`b`c", "Windows", "{V} C", "9", "insert before", "C:`a`b`c`C:", "Leading \'{R} C:`\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:`a`b`c", "Windows", "{V} C", "9", "append after", "C:`a`b`c`C:", "Leading \'{R} C:`\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a`b`c", "Windows", "{V} C", "0", "insert before", "C:C:a`b`c", "Leading \'{V} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a`b`c", "Windows", "{V} C", "0", "append after", "C:C:a`b`c", "Leading \'{V} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a`b`c", "Windows", "{V} C", "3", "insert before", "C:a`b`C:c", "Leading \'{V} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a`b`c", "Windows", "{V} C", "3", "append after", "C:a`b`c`C:", "Leading \'{V} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a`b`c", "Windows", "{V} C", "9", "insert before", "C:a`b`c`C:", "Leading \'{V} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a`b`c", "Windows", "{V} C", "9", "append after", "C:a`b`c`C:", "Leading \'{V} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("`a`b`c", "Windows", "{V} C", "0", "insert before", "C:`a`b`c", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("`a`b`c", "Windows", "{V} C", "0", "append after", "`C:a`b`c", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("`a`b`c", "Windows", "{V} C", "3", "insert before", "`a`b`C:c", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("`a`b`c", "Windows", "{V} C", "3", "append after", "`a`b`c`C:", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("`a`b`c", "Windows", "{V} C", "9", "insert before", "`a`b`c`C:", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("`a`b`c", "Windows", "{V} C", "9", "append after", "`a`b`c`C:", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("``a`b`c", "Windows", "{V} C", "0", "insert before", "C:``a`b`c", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("``a`b`c", "Windows", "{V} C", "0", "append after", "``a`C:b`c", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("``a`b`c", "Windows", "{V} C", "2", "insert before", "``a`b`C:c", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("``a`b`c", "Windows", "{V} C", "2", "append after", "``a`b`c`C:", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("``a`b`c", "Windows", "{V} C", "9", "insert before", "``a`b`c`C:", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("``a`b`c", "Windows", "{V} C", "9", "append after", "``a`b`c`C:", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("(empty)", "Windows", "{V} C", "0", "insert before", "C:.", "Leading \'{E}\' - Notice how \'{E}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(empty)", "Windows", "{V} C", "0", "append after", ".`C:", "Leading \'{E}\' - Notice how \'{E}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(empty)", "Windows", "{V} C", "9", "insert before", ".`C:", "Leading \'{E}\' - Notice how \'{E}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(empty)", "Windows", "{V} C", "9", "append after", ".`C:", "Leading \'{E}\' - Notice how \'{E}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(null)", "Windows", "{V} C", "0", "insert before", "C:.", "Leading \'{E}\' - Notice how \'{0}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(null)", "Windows", "{V} C", "0", "append after", ".`C:", "Leading \'{E}\' - Notice how \'{0}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(null)", "Windows", "{V} C", "9", "insert before", ".`C:", "Leading \'{E}\' - Notice how \'{0}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(null)", "Windows", "{V} C", "9", "append after", ".`C:", "Leading \'{E}\' - Notice how \'{0}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute(".", "Windows", "{V} C", "0", "insert before", "C:.", "Leading \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute(".", "Windows", "{V} C", "0", "append after", ".`C:", "Leading \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute(".", "Windows", "{V} C", "9", "insert before", ".`C:", "Leading \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute(".", "Windows", "{V} C", "9", "append after", ".`C:", "Leading \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("..", "Windows", "{V} C", "0", "insert before", "C:..", "Leading \'..\'", null)]
        [NUnit.Framework.TestCaseAttribute("..", "Windows", "{V} C", "0", "append after", "..`C:", "Leading \'..\'", null)]
        [NUnit.Framework.TestCaseAttribute("..", "Windows", "{V} C", "9", "insert before", "..`C:", "Leading \'..\'", null)]
        [NUnit.Framework.TestCaseAttribute("..", "Windows", "{V} C", "9", "append after", "..`C:", "Leading \'..\'", null)]
        [NUnit.Framework.TestCaseAttribute("a`b`c", "Windows", "{R} C", "0", "insert before", "C:`a`b`c", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("a`b`c", "Windows", "{R} C", "0", "append after", "a`C:`b`c", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("a`b`c", "Windows", "{R} C", "2", "insert before", "a`b`C:`c", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("a`b`c", "Windows", "{R} C", "2", "append after", "a`b`c`C:`", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("a`b`c", "Windows", "{R} C", "9", "insert before", "a`b`c`C:`", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("a`b`c", "Windows", "{R} C", "9", "append after", "a`b`c`C:`", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:`a`b`c", "Windows", "{R} C", "0", "insert before", "C:`C:`a`b`c", "Leading \'{R} C:`\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:`a`b`c", "Windows", "{R} C", "0", "append after", "C:`C:`a`b`c", "Leading \'{R} C:`\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:`a`b`c", "Windows", "{R} C", "3", "insert before", "C:`a`b`C:`c", "Leading \'{R} C:`\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:`a`b`c", "Windows", "{R} C", "3", "append after", "C:`a`b`c`C:`", "Leading \'{R} C:`\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:`a`b`c", "Windows", "{R} C", "9", "insert before", "C:`a`b`c`C:`", "Leading \'{R} C:`\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:`a`b`c", "Windows", "{R} C", "9", "append after", "C:`a`b`c`C:`", "Leading \'{R} C:`\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a`b`c", "Windows", "{R} C", "0", "insert before", "C:`C:a`b`c", "Leading \'{V} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a`b`c", "Windows", "{R} C", "0", "append after", "C:C:`a`b`c", "Leading \'{V} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a`b`c", "Windows", "{R} C", "3", "insert before", "C:a`b`C:`c", "Leading \'{V} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a`b`c", "Windows", "{R} C", "3", "append after", "C:a`b`c`C:`", "Leading \'{V} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a`b`c", "Windows", "{R} C", "9", "insert before", "C:a`b`c`C:`", "Leading \'{V} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a`b`c", "Windows", "{R} C", "9", "append after", "C:a`b`c`C:`", "Leading \'{V} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("`a`b`c", "Windows", "{R} C", "0", "insert before", "C:``a`b`c", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("`a`b`c", "Windows", "{R} C", "0", "append after", "`C:`a`b`c", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("`a`b`c", "Windows", "{R} C", "3", "insert before", "`a`b`C:`c", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("`a`b`c", "Windows", "{R} C", "3", "append after", "`a`b`c`C:`", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("`a`b`c", "Windows", "{R} C", "9", "insert before", "`a`b`c`C:`", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("`a`b`c", "Windows", "{R} C", "9", "append after", "`a`b`c`C:`", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("``a`b`c", "Windows", "{R} C", "0", "insert before", "C:```a`b`c", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("``a`b`c", "Windows", "{R} C", "0", "append after", "``a`C:`b`c", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("``a`b`c", "Windows", "{R} C", "2", "insert before", "``a`b`C:`c", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("``a`b`c", "Windows", "{R} C", "2", "append after", "``a`b`c`C:`", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("``a`b`c", "Windows", "{R} C", "9", "insert before", "``a`b`c`C:`", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("``a`b`c", "Windows", "{R} C", "9", "append after", "``a`b`c`C:`", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("(empty)", "Windows", "{R} C", "0", "insert before", "C:`.", "Leading \'{E}\' - Notice how \'{E}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(empty)", "Windows", "{R} C", "0", "append after", ".`C:`", "Leading \'{E}\' - Notice how \'{E}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(empty)", "Windows", "{R} C", "9", "insert before", ".`C:`", "Leading \'{E}\' - Notice how \'{E}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(empty)", "Windows", "{R} C", "9", "append after", ".`C:`", "Leading \'{E}\' - Notice how \'{E}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(null)", "Windows", "{R} C", "0", "insert before", "C:`.", "Leading \'{E}\' - Notice how \'{0}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(null)", "Windows", "{R} C", "0", "append after", ".`C:`", "Leading \'{E}\' - Notice how \'{0}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(null)", "Windows", "{R} C", "9", "insert before", ".`C:`", "Leading \'{E}\' - Notice how \'{0}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(null)", "Windows", "{R} C", "9", "append after", ".`C:`", "Leading \'{E}\' - Notice how \'{0}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute(".", "Windows", "{R} C", "0", "insert before", "C:`.", "Leading \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute(".", "Windows", "{R} C", "0", "append after", ".`C:`", "Leading \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute(".", "Windows", "{R} C", "9", "insert before", ".`C:`", "Leading \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute(".", "Windows", "{R} C", "9", "append after", ".`C:`", "Leading \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("..", "Windows", "{R} C", "0", "insert before", "C:`..", "Leading \'..\'", null)]
        [NUnit.Framework.TestCaseAttribute("..", "Windows", "{R} C", "0", "append after", "..`C:`", "Leading \'..\'", null)]
        [NUnit.Framework.TestCaseAttribute("..", "Windows", "{R} C", "9", "insert before", "..`C:`", "Leading \'..\'", null)]
        [NUnit.Framework.TestCaseAttribute("..", "Windows", "{R} C", "9", "append after", "..`C:`", "Leading \'..\'", null)]
        [NUnit.Framework.TestCaseAttribute("a`b`c", "Windows", "{$}", "0", "insert before", "`a`b`c", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("a`b`c", "Windows", "{$}", "0", "append after", "a``b`c", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("a`b`c", "Windows", "{$}", "2", "insert before", "a`b``c", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("a`b`c", "Windows", "{$}", "2", "append after", "a`b`c`", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("a`b`c", "Windows", "{$}", "9", "insert before", "a`b`c`", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("a`b`c", "Windows", "{$}", "9", "append after", "a`b`c`", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:`a`b`c", "Windows", "{$}", "0", "insert before", "`C:`a`b`c", "Leading \'{R} C:`\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:`a`b`c", "Windows", "{$}", "0", "append after", "C:``a`b`c", "Leading \'{R} C:`\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:`a`b`c", "Windows", "{$}", "3", "insert before", "C:`a`b``c", "Leading \'{R} C:`\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:`a`b`c", "Windows", "{$}", "3", "append after", "C:`a`b`c`", "Leading \'{R} C:`\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:`a`b`c", "Windows", "{$}", "9", "insert before", "C:`a`b`c`", "Leading \'{R} C:`\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:`a`b`c", "Windows", "{$}", "9", "append after", "C:`a`b`c`", "Leading \'{R} C:`\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a`b`c", "Windows", "{$}", "0", "insert before", "`C:a`b`c", "Leading \'{V} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a`b`c", "Windows", "{$}", "0", "append after", "C:`a`b`c", "Leading \'{V} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a`b`c", "Windows", "{$}", "3", "insert before", "C:a`b``c", "Leading \'{V} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a`b`c", "Windows", "{$}", "3", "append after", "C:a`b`c`", "Leading \'{V} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a`b`c", "Windows", "{$}", "9", "insert before", "C:a`b`c`", "Leading \'{V} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a`b`c", "Windows", "{$}", "9", "append after", "C:a`b`c`", "Leading \'{V} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("`a`b`c", "Windows", "{$}", "0", "insert before", "``a`b`c", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("`a`b`c", "Windows", "{$}", "0", "append after", "``a`b`c", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("`a`b`c", "Windows", "{$}", "3", "insert before", "`a`b``c", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("`a`b`c", "Windows", "{$}", "3", "append after", "`a`b`c`", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("`a`b`c", "Windows", "{$}", "9", "insert before", "`a`b`c`", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("`a`b`c", "Windows", "{$}", "9", "append after", "`a`b`c`", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("``a`b`c", "Windows", "{$}", "0", "insert before", "```a`b`c", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("``a`b`c", "Windows", "{$}", "0", "append after", "``a``b`c", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("``a`b`c", "Windows", "{$}", "2", "insert before", "``a`b``c", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("``a`b`c", "Windows", "{$}", "2", "append after", "``a`b`c`", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("``a`b`c", "Windows", "{$}", "9", "insert before", "``a`b`c`", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("``a`b`c", "Windows", "{$}", "9", "append after", "``a`b`c`", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("(empty)", "Windows", "{$}", "0", "insert before", "`.", "Leading \'{E}\' - Notice how \'{E}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(empty)", "Windows", "{$}", "0", "append after", ".`", "Leading \'{E}\' - Notice how \'{E}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(empty)", "Windows", "{$}", "9", "insert before", ".`", "Leading \'{E}\' - Notice how \'{E}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(empty)", "Windows", "{$}", "9", "append after", ".`", "Leading \'{E}\' - Notice how \'{E}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(null)", "Windows", "{$}", "0", "insert before", "`.", "Leading \'{E}\' - Notice how \'{0}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(null)", "Windows", "{$}", "0", "append after", ".`", "Leading \'{E}\' - Notice how \'{0}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(null)", "Windows", "{$}", "9", "insert before", ".`", "Leading \'{E}\' - Notice how \'{0}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(null)", "Windows", "{$}", "9", "append after", ".`", "Leading \'{E}\' - Notice how \'{0}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute(".", "Windows", "{$}", "0", "insert before", "`.", "Leading \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute(".", "Windows", "{$}", "0", "append after", ".`", "Leading \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute(".", "Windows", "{$}", "9", "insert before", ".`", "Leading \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute(".", "Windows", "{$}", "9", "append after", ".`", "Leading \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("..", "Windows", "{$}", "0", "insert before", "`..", "Leading \'..\'", null)]
        [NUnit.Framework.TestCaseAttribute("..", "Windows", "{$}", "0", "append after", "..`", "Leading \'..\'", null)]
        [NUnit.Framework.TestCaseAttribute("..", "Windows", "{$}", "9", "insert before", "..`", "Leading \'..\'", null)]
        [NUnit.Framework.TestCaseAttribute("..", "Windows", "{$}", "9", "append after", "..`", "Leading \'..\'", null)]
        [NUnit.Framework.TestCaseAttribute("a`b`c", "Windows", "{X} 0", "0", "insert before", "``0`a`b`c", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("a`b`c", "Windows", "{X} 0", "0", "append after", "a```0`b`c", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("a`b`c", "Windows", "{X} 0", "2", "insert before", "a`b```0`c", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("a`b`c", "Windows", "{X} 0", "2", "append after", "a`b`c```0", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("a`b`c", "Windows", "{X} 0", "9", "insert before", "a`b`c```0", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("a`b`c", "Windows", "{X} 0", "9", "append after", "a`b`c```0", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:`a`b`c", "Windows", "{X} 0", "0", "insert before", "``0`C:`a`b`c", "Leading \'{R} C:`\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:`a`b`c", "Windows", "{X} 0", "0", "append after", "C:```0`a`b`c", "Leading \'{R} C:`\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:`a`b`c", "Windows", "{X} 0", "3", "insert before", "C:`a`b```0`c", "Leading \'{R} C:`\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:`a`b`c", "Windows", "{X} 0", "3", "append after", "C:`a`b`c```0", "Leading \'{R} C:`\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:`a`b`c", "Windows", "{X} 0", "9", "insert before", "C:`a`b`c```0", "Leading \'{R} C:`\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:`a`b`c", "Windows", "{X} 0", "9", "append after", "C:`a`b`c```0", "Leading \'{R} C:`\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a`b`c", "Windows", "{X} 0", "0", "insert before", "``0`C:a`b`c", "Leading \'{V} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a`b`c", "Windows", "{X} 0", "0", "append after", "C:``0`a`b`c", "Leading \'{V} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a`b`c", "Windows", "{X} 0", "3", "insert before", "C:a`b```0`c", "Leading \'{V} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a`b`c", "Windows", "{X} 0", "3", "append after", "C:a`b`c```0", "Leading \'{V} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a`b`c", "Windows", "{X} 0", "9", "insert before", "C:a`b`c```0", "Leading \'{V} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a`b`c", "Windows", "{X} 0", "9", "append after", "C:a`b`c```0", "Leading \'{V} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("`a`b`c", "Windows", "{X} 0", "0", "insert before", "``0``a`b`c", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("`a`b`c", "Windows", "{X} 0", "0", "append after", "```0`a`b`c", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("`a`b`c", "Windows", "{X} 0", "3", "insert before", "`a`b```0`c", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("`a`b`c", "Windows", "{X} 0", "3", "append after", "`a`b`c```0", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("`a`b`c", "Windows", "{X} 0", "9", "insert before", "`a`b`c```0", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("`a`b`c", "Windows", "{X} 0", "9", "append after", "`a`b`c```0", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("``a`b`c", "Windows", "{X} 0", "0", "insert before", "``0```a`b`c", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("``a`b`c", "Windows", "{X} 0", "0", "append after", "``a```0`b`c", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("``a`b`c", "Windows", "{X} 0", "2", "insert before", "``a`b```0`c", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("``a`b`c", "Windows", "{X} 0", "2", "append after", "``a`b`c```0", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("``a`b`c", "Windows", "{X} 0", "9", "insert before", "``a`b`c```0", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("``a`b`c", "Windows", "{X} 0", "9", "append after", "``a`b`c```0", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("(empty)", "Windows", "{X} 0", "0", "insert before", "``0`.", "Leading \'{E}\' - Notice how \'{E}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(empty)", "Windows", "{X} 0", "0", "append after", ".```0", "Leading \'{E}\' - Notice how \'{E}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(empty)", "Windows", "{X} 0", "9", "insert before", ".```0", "Leading \'{E}\' - Notice how \'{E}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(empty)", "Windows", "{X} 0", "9", "append after", ".```0", "Leading \'{E}\' - Notice how \'{E}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(null)", "Windows", "{X} 0", "0", "insert before", "``0`.", "Leading \'{E}\' - Notice how \'{0}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(null)", "Windows", "{X} 0", "0", "append after", ".```0", "Leading \'{E}\' - Notice how \'{0}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(null)", "Windows", "{X} 0", "9", "insert before", ".```0", "Leading \'{E}\' - Notice how \'{0}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(null)", "Windows", "{X} 0", "9", "append after", ".```0", "Leading \'{E}\' - Notice how \'{0}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute(".", "Windows", "{X} 0", "0", "insert before", "``0`.", "Leading \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute(".", "Windows", "{X} 0", "0", "append after", ".```0", "Leading \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute(".", "Windows", "{X} 0", "9", "insert before", ".```0", "Leading \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute(".", "Windows", "{X} 0", "9", "append after", ".```0", "Leading \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("..", "Windows", "{X} 0", "0", "insert before", "``0`..", "Leading \'..\'", null)]
        [NUnit.Framework.TestCaseAttribute("..", "Windows", "{X} 0", "0", "append after", "..```0", "Leading \'..\'", null)]
        [NUnit.Framework.TestCaseAttribute("..", "Windows", "{X} 0", "9", "insert before", "..```0", "Leading \'..\'", null)]
        [NUnit.Framework.TestCaseAttribute("..", "Windows", "{X} 0", "9", "append after", "..```0", "Leading \'..\'", null)]
        [NUnit.Framework.TestCaseAttribute("a/b/c", "Linux", "{G} 0", "0", "insert before", "0/a/b/c", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("a/b/c", "Linux", "{G} 0", "0", "append after", "a/0/b/c", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("a/b/c", "Linux", "{G} 0", "2", "insert before", "a/b/0/c", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("a/b/c", "Linux", "{G} 0", "2", "append after", "a/b/c/0", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("a/b/c", "Linux", "{G} 0", "9", "insert before", "a/b/c/0", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("a/b/c", "Linux", "{G} 0", "9", "append after", "a/b/c/0", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:/a/b/c", "Linux", "{G} 0", "0", "insert before", "0/C:/a/b/c", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:/a/b/c", "Linux", "{G} 0", "0", "append after", "C:/0/a/b/c", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:/a/b/c", "Linux", "{G} 0", "3", "insert before", "C:/a/b/0/c", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:/a/b/c", "Linux", "{G} 0", "3", "append after", "C:/a/b/c/0", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:/a/b/c", "Linux", "{G} 0", "9", "insert before", "C:/a/b/c/0", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:/a/b/c", "Linux", "{G} 0", "9", "append after", "C:/a/b/c/0", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a/b/c", "Linux", "{G} 0", "0", "insert before", "0/C:a/b/c", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a/b/c", "Linux", "{G} 0", "0", "append after", "C:a/0/b/c", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a/b/c", "Linux", "{G} 0", "2", "insert before", "C:a/b/0/c", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a/b/c", "Linux", "{G} 0", "2", "append after", "C:a/b/c/0", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a/b/c", "Linux", "{G} 0", "9", "insert before", "C:a/b/c/0", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a/b/c", "Linux", "{G} 0", "9", "append after", "C:a/b/c/0", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("/a/b/c", "Linux", "{G} 0", "0", "insert before", "0//a/b/c", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("/a/b/c", "Linux", "{G} 0", "0", "append after", "/0/a/b/c", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("/a/b/c", "Linux", "{G} 0", "3", "insert before", "/a/b/0/c", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("/a/b/c", "Linux", "{G} 0", "3", "append after", "/a/b/c/0", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("/a/b/c", "Linux", "{G} 0", "9", "insert before", "/a/b/c/0", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("/a/b/c", "Linux", "{G} 0", "9", "append after", "/a/b/c/0", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("//a/b/c", "Linux", "{G} 0", "0", "insert before", "0///a/b/c", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("//a/b/c", "Linux", "{G} 0", "0", "append after", "//a/0/b/c", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("//a/b/c", "Linux", "{G} 0", "2", "insert before", "//a/b/0/c", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("//a/b/c", "Linux", "{G} 0", "2", "append after", "//a/b/c/0", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("//a/b/c", "Linux", "{G} 0", "9", "insert before", "//a/b/c/0", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("//a/b/c", "Linux", "{G} 0", "9", "append after", "//a/b/c/0", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("(empty)", "Linux", "{G} 0", "0", "insert before", "0/.", "Leading \'{E}\' - Notice how \'{E}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(empty)", "Linux", "{G} 0", "0", "append after", "./0", "Leading \'{E}\' - Notice how \'{E}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(empty)", "Linux", "{G} 0", "9", "insert before", "./0", "Leading \'{E}\' - Notice how \'{E}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(empty)", "Linux", "{G} 0", "9", "append after", "./0", "Leading \'{E}\' - Notice how \'{E}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(null)", "Linux", "{G} 0", "0", "insert before", "0/.", "Leading \'{E}\' - Notice how \'{0}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(null)", "Linux", "{G} 0", "0", "append after", "./0", "Leading \'{E}\' - Notice how \'{0}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(null)", "Linux", "{G} 0", "9", "insert before", "./0", "Leading \'{E}\' - Notice how \'{0}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(null)", "Linux", "{G} 0", "9", "append after", "./0", "Leading \'{E}\' - Notice how \'{0}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute(".", "Linux", "{G} 0", "0", "insert before", "0/.", "Leading \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute(".", "Linux", "{G} 0", "0", "append after", "./0", "Leading \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute(".", "Linux", "{G} 0", "9", "insert before", "./0", "Leading \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute(".", "Linux", "{G} 0", "9", "append after", "./0", "Leading \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("..", "Linux", "{G} 0", "0", "insert before", "0/..", "Leading \'..\'", null)]
        [NUnit.Framework.TestCaseAttribute("..", "Linux", "{G} 0", "0", "append after", "../0", "Leading \'..\'", null)]
        [NUnit.Framework.TestCaseAttribute("..", "Linux", "{G} 0", "9", "insert before", "../0", "Leading \'..\'", null)]
        [NUnit.Framework.TestCaseAttribute("..", "Linux", "{G} 0", "9", "append after", "../0", "Leading \'..\'", null)]
        [NUnit.Framework.TestCaseAttribute("a/b/c", "Linux", "{R}", "0", "insert before", "/a/b/c", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("a/b/c", "Linux", "{R}", "0", "append after", "a//b/c", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("a/b/c", "Linux", "{R}", "2", "insert before", "a/b//c", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("a/b/c", "Linux", "{R}", "2", "append after", "a/b/c/", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("a/b/c", "Linux", "{R}", "9", "insert before", "a/b/c/", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("a/b/c", "Linux", "{R}", "9", "append after", "a/b/c/", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:/a/b/c", "Linux", "{R}", "0", "insert before", "/C:/a/b/c", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:/a/b/c", "Linux", "{R}", "0", "append after", "C://a/b/c", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:/a/b/c", "Linux", "{R}", "3", "insert before", "C:/a/b//c", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:/a/b/c", "Linux", "{R}", "3", "append after", "C:/a/b/c/", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:/a/b/c", "Linux", "{R}", "9", "insert before", "C:/a/b/c/", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:/a/b/c", "Linux", "{R}", "9", "append after", "C:/a/b/c/", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a/b/c", "Linux", "{R}", "0", "insert before", "/C:a/b/c", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a/b/c", "Linux", "{R}", "0", "append after", "C:a//b/c", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a/b/c", "Linux", "{R}", "2", "insert before", "C:a/b//c", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a/b/c", "Linux", "{R}", "2", "append after", "C:a/b/c/", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a/b/c", "Linux", "{R}", "9", "insert before", "C:a/b/c/", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a/b/c", "Linux", "{R}", "9", "append after", "C:a/b/c/", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("/a/b/c", "Linux", "{R}", "0", "insert before", "//a/b/c", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("/a/b/c", "Linux", "{R}", "0", "append after", "//a/b/c", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("/a/b/c", "Linux", "{R}", "3", "insert before", "/a/b//c", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("/a/b/c", "Linux", "{R}", "3", "append after", "/a/b/c/", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("/a/b/c", "Linux", "{R}", "9", "insert before", "/a/b/c/", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("/a/b/c", "Linux", "{R}", "9", "append after", "/a/b/c/", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("//a/b/c", "Linux", "{R}", "0", "insert before", "///a/b/c", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("//a/b/c", "Linux", "{R}", "0", "append after", "//a//b/c", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("//a/b/c", "Linux", "{R}", "2", "insert before", "//a/b//c", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("//a/b/c", "Linux", "{R}", "2", "append after", "//a/b/c/", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("//a/b/c", "Linux", "{R}", "9", "insert before", "//a/b/c/", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("//a/b/c", "Linux", "{R}", "9", "append after", "//a/b/c/", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("(empty)", "Linux", "{R}", "0", "insert before", "/.", "Leading \'{E}\' - Notice how \'{E}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(empty)", "Linux", "{R}", "0", "append after", "./", "Leading \'{E}\' - Notice how \'{E}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(empty)", "Linux", "{R}", "9", "insert before", "./", "Leading \'{E}\' - Notice how \'{E}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(empty)", "Linux", "{R}", "9", "append after", "./", "Leading \'{E}\' - Notice how \'{E}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(null)", "Linux", "{R}", "0", "insert before", "/.", "Leading \'{E}\' - Notice how \'{0}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(null)", "Linux", "{R}", "0", "append after", "./", "Leading \'{E}\' - Notice how \'{0}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(null)", "Linux", "{R}", "9", "insert before", "./", "Leading \'{E}\' - Notice how \'{0}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(null)", "Linux", "{R}", "9", "append after", "./", "Leading \'{E}\' - Notice how \'{0}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute(".", "Linux", "{R}", "0", "insert before", "/.", "Leading \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute(".", "Linux", "{R}", "0", "append after", "./", "Leading \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute(".", "Linux", "{R}", "9", "insert before", "./", "Leading \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute(".", "Linux", "{R}", "9", "append after", "./", "Leading \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("..", "Linux", "{R}", "0", "insert before", "/..", "Leading \'..\'", null)]
        [NUnit.Framework.TestCaseAttribute("..", "Linux", "{R}", "0", "append after", "../", "Leading \'..\'", null)]
        [NUnit.Framework.TestCaseAttribute("..", "Linux", "{R}", "9", "insert before", "../", "Leading \'..\'", null)]
        [NUnit.Framework.TestCaseAttribute("..", "Linux", "{R}", "9", "append after", "../", "Leading \'..\'", null)]
        [NUnit.Framework.TestCaseAttribute("a/b/c", "Linux", "{X} 0", "0", "insert before", "//0/a/b/c", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("a/b/c", "Linux", "{X} 0", "0", "append after", "a///0/b/c", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("a/b/c", "Linux", "{X} 0", "2", "insert before", "a/b///0/c", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("a/b/c", "Linux", "{X} 0", "2", "append after", "a/b/c///0", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("a/b/c", "Linux", "{X} 0", "9", "insert before", "a/b/c///0", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("a/b/c", "Linux", "{X} 0", "9", "append after", "a/b/c///0", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:/a/b/c", "Linux", "{X} 0", "0", "insert before", "//0/C:/a/b/c", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:/a/b/c", "Linux", "{X} 0", "0", "append after", "C:///0/a/b/c", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:/a/b/c", "Linux", "{X} 0", "3", "insert before", "C:/a/b///0/c", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:/a/b/c", "Linux", "{X} 0", "3", "append after", "C:/a/b/c///0", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:/a/b/c", "Linux", "{X} 0", "9", "insert before", "C:/a/b/c///0", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:/a/b/c", "Linux", "{X} 0", "9", "append after", "C:/a/b/c///0", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a/b/c", "Linux", "{X} 0", "0", "insert before", "//0/C:a/b/c", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a/b/c", "Linux", "{X} 0", "0", "append after", "C:a///0/b/c", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a/b/c", "Linux", "{X} 0", "2", "insert before", "C:a/b///0/c", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a/b/c", "Linux", "{X} 0", "2", "append after", "C:a/b/c///0", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a/b/c", "Linux", "{X} 0", "9", "insert before", "C:a/b/c///0", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a/b/c", "Linux", "{X} 0", "9", "append after", "C:a/b/c///0", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("/a/b/c", "Linux", "{X} 0", "0", "insert before", "//0//a/b/c", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("/a/b/c", "Linux", "{X} 0", "0", "append after", "///0/a/b/c", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("/a/b/c", "Linux", "{X} 0", "3", "insert before", "/a/b///0/c", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("/a/b/c", "Linux", "{X} 0", "3", "append after", "/a/b/c///0", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("/a/b/c", "Linux", "{X} 0", "9", "insert before", "/a/b/c///0", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("/a/b/c", "Linux", "{X} 0", "9", "append after", "/a/b/c///0", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("//a/b/c", "Linux", "{X} 0", "0", "insert before", "//0///a/b/c", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("//a/b/c", "Linux", "{X} 0", "0", "append after", "//a///0/b/c", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("//a/b/c", "Linux", "{X} 0", "2", "insert before", "//a/b///0/c", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("//a/b/c", "Linux", "{X} 0", "2", "append after", "//a/b/c///0", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("//a/b/c", "Linux", "{X} 0", "9", "insert before", "//a/b/c///0", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("//a/b/c", "Linux", "{X} 0", "9", "append after", "//a/b/c///0", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("(empty)", "Linux", "{X} 0", "0", "insert before", "//0/.", "Leading \'{E}\' - Notice how \'{E}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(empty)", "Linux", "{X} 0", "0", "append after", ".///0", "Leading \'{E}\' - Notice how \'{E}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(empty)", "Linux", "{X} 0", "9", "insert before", ".///0", "Leading \'{E}\' - Notice how \'{E}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(empty)", "Linux", "{X} 0", "9", "append after", ".///0", "Leading \'{E}\' - Notice how \'{E}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(null)", "Linux", "{X} 0", "0", "insert before", "//0/.", "Leading \'{E}\' - Notice how \'{0}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(null)", "Linux", "{X} 0", "0", "append after", ".///0", "Leading \'{E}\' - Notice how \'{0}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(null)", "Linux", "{X} 0", "9", "insert before", ".///0", "Leading \'{E}\' - Notice how \'{0}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(null)", "Linux", "{X} 0", "9", "append after", ".///0", "Leading \'{E}\' - Notice how \'{0}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute(".", "Linux", "{X} 0", "0", "insert before", "//0/.", "Leading \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute(".", "Linux", "{X} 0", "0", "append after", ".///0", "Leading \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute(".", "Linux", "{X} 0", "9", "insert before", ".///0", "Leading \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute(".", "Linux", "{X} 0", "9", "append after", ".///0", "Leading \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("..", "Linux", "{X} 0", "0", "insert before", "//0/..", "Leading \'..\'", null)]
        [NUnit.Framework.TestCaseAttribute("..", "Linux", "{X} 0", "0", "append after", "..///0", "Leading \'..\'", null)]
        [NUnit.Framework.TestCaseAttribute("..", "Linux", "{X} 0", "9", "insert before", "..///0", "Leading \'..\'", null)]
        [NUnit.Framework.TestCaseAttribute("..", "Linux", "{X} 0", "9", "append after", "..///0", "Leading \'..\'", null)]
        [NUnit.Framework.TestCaseAttribute("a/b/c", "Linux", "{S} .", "0", "insert before", "./a/b/c", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("a/b/c", "Linux", "{S} .", "0", "append after", "a/./b/c", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("a/b/c", "Linux", "{S} .", "2", "insert before", "a/b/./c", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("a/b/c", "Linux", "{S} .", "2", "append after", "a/b/c/.", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("a/b/c", "Linux", "{S} .", "9", "insert before", "a/b/c/.", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("a/b/c", "Linux", "{S} .", "9", "append after", "a/b/c/.", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:/a/b/c", "Linux", "{S} .", "0", "insert before", "./C:/a/b/c", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:/a/b/c", "Linux", "{S} .", "0", "append after", "C:/./a/b/c", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:/a/b/c", "Linux", "{S} .", "3", "insert before", "C:/a/b/./c", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:/a/b/c", "Linux", "{S} .", "3", "append after", "C:/a/b/c/.", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:/a/b/c", "Linux", "{S} .", "9", "insert before", "C:/a/b/c/.", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:/a/b/c", "Linux", "{S} .", "9", "append after", "C:/a/b/c/.", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a/b/c", "Linux", "{S} .", "0", "insert before", "./C:a/b/c", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a/b/c", "Linux", "{S} .", "0", "append after", "C:a/./b/c", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a/b/c", "Linux", "{S} .", "2", "insert before", "C:a/b/./c", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a/b/c", "Linux", "{S} .", "2", "append after", "C:a/b/c/.", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a/b/c", "Linux", "{S} .", "9", "insert before", "C:a/b/c/.", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a/b/c", "Linux", "{S} .", "9", "append after", "C:a/b/c/.", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("/a/b/c", "Linux", "{S} .", "0", "insert before", ".//a/b/c", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("/a/b/c", "Linux", "{S} .", "0", "append after", "/./a/b/c", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("/a/b/c", "Linux", "{S} .", "3", "insert before", "/a/b/./c", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("/a/b/c", "Linux", "{S} .", "3", "append after", "/a/b/c/.", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("/a/b/c", "Linux", "{S} .", "9", "insert before", "/a/b/c/.", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("/a/b/c", "Linux", "{S} .", "9", "append after", "/a/b/c/.", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("//a/b/c", "Linux", "{S} .", "0", "insert before", ".///a/b/c", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("//a/b/c", "Linux", "{S} .", "0", "append after", "//a/./b/c", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("//a/b/c", "Linux", "{S} .", "2", "insert before", "//a/b/./c", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("//a/b/c", "Linux", "{S} .", "2", "append after", "//a/b/c/.", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("//a/b/c", "Linux", "{S} .", "9", "insert before", "//a/b/c/.", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("//a/b/c", "Linux", "{S} .", "9", "append after", "//a/b/c/.", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("(empty)", "Linux", "{S} .", "0", "insert before", "./.", "Leading \'{E}\' - Notice how \'{E}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(empty)", "Linux", "{S} .", "0", "append after", "./.", "Leading \'{E}\' - Notice how \'{E}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(empty)", "Linux", "{S} .", "9", "insert before", "./.", "Leading \'{E}\' - Notice how \'{E}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(empty)", "Linux", "{S} .", "9", "append after", "./.", "Leading \'{E}\' - Notice how \'{E}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(null)", "Linux", "{S} .", "0", "insert before", "./.", "Leading \'{E}\' - Notice how \'{0}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(null)", "Linux", "{S} .", "0", "append after", "./.", "Leading \'{E}\' - Notice how \'{0}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(null)", "Linux", "{S} .", "9", "insert before", "./.", "Leading \'{E}\' - Notice how \'{0}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(null)", "Linux", "{S} .", "9", "append after", "./.", "Leading \'{E}\' - Notice how \'{0}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute(".", "Linux", "{S} .", "0", "insert before", "./.", "Leading \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute(".", "Linux", "{S} .", "0", "append after", "./.", "Leading \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute(".", "Linux", "{S} .", "9", "insert before", "./.", "Leading \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute(".", "Linux", "{S} .", "9", "append after", "./.", "Leading \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("..", "Linux", "{S} .", "0", "insert before", "./..", "Leading \'..\'", null)]
        [NUnit.Framework.TestCaseAttribute("..", "Linux", "{S} .", "0", "append after", "../.", "Leading \'..\'", null)]
        [NUnit.Framework.TestCaseAttribute("..", "Linux", "{S} .", "9", "insert before", "../.", "Leading \'..\'", null)]
        [NUnit.Framework.TestCaseAttribute("..", "Linux", "{S} .", "9", "append after", "../.", "Leading \'..\'", null)]
        [NUnit.Framework.TestCaseAttribute("a/b/c", "Linux", "{P} ..", "0", "insert before", "../a/b/c", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("a/b/c", "Linux", "{P} ..", "0", "append after", "a/../b/c", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("a/b/c", "Linux", "{P} ..", "2", "insert before", "a/b/../c", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("a/b/c", "Linux", "{P} ..", "2", "append after", "a/b/c/..", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("a/b/c", "Linux", "{P} ..", "9", "insert before", "a/b/c/..", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("a/b/c", "Linux", "{P} ..", "9", "append after", "a/b/c/..", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:/a/b/c", "Linux", "{P} ..", "0", "insert before", "../C:/a/b/c", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:/a/b/c", "Linux", "{P} ..", "0", "append after", "C:/../a/b/c", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:/a/b/c", "Linux", "{P} ..", "3", "insert before", "C:/a/b/../c", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:/a/b/c", "Linux", "{P} ..", "3", "append after", "C:/a/b/c/..", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:/a/b/c", "Linux", "{P} ..", "9", "insert before", "C:/a/b/c/..", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:/a/b/c", "Linux", "{P} ..", "9", "append after", "C:/a/b/c/..", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a/b/c", "Linux", "{P} ..", "0", "insert before", "../C:a/b/c", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a/b/c", "Linux", "{P} ..", "0", "append after", "C:a/../b/c", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a/b/c", "Linux", "{P} ..", "2", "insert before", "C:a/b/../c", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a/b/c", "Linux", "{P} ..", "2", "append after", "C:a/b/c/..", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a/b/c", "Linux", "{P} ..", "9", "insert before", "C:a/b/c/..", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a/b/c", "Linux", "{P} ..", "9", "append after", "C:a/b/c/..", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("/a/b/c", "Linux", "{P} ..", "0", "insert before", "..//a/b/c", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("/a/b/c", "Linux", "{P} ..", "0", "append after", "/../a/b/c", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("/a/b/c", "Linux", "{P} ..", "3", "insert before", "/a/b/../c", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("/a/b/c", "Linux", "{P} ..", "3", "append after", "/a/b/c/..", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("/a/b/c", "Linux", "{P} ..", "9", "insert before", "/a/b/c/..", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("/a/b/c", "Linux", "{P} ..", "9", "append after", "/a/b/c/..", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("//a/b/c", "Linux", "{P} ..", "0", "insert before", "..///a/b/c", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("//a/b/c", "Linux", "{P} ..", "0", "append after", "//a/../b/c", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("//a/b/c", "Linux", "{P} ..", "2", "insert before", "//a/b/../c", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("//a/b/c", "Linux", "{P} ..", "2", "append after", "//a/b/c/..", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("//a/b/c", "Linux", "{P} ..", "9", "insert before", "//a/b/c/..", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("//a/b/c", "Linux", "{P} ..", "9", "append after", "//a/b/c/..", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("(empty)", "Linux", "{P} ..", "0", "insert before", "../.", "Leading \'{E}\' - Notice how \'{E}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(empty)", "Linux", "{P} ..", "0", "append after", "./..", "Leading \'{E}\' - Notice how \'{E}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(empty)", "Linux", "{P} ..", "9", "insert before", "./..", "Leading \'{E}\' - Notice how \'{E}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(empty)", "Linux", "{P} ..", "9", "append after", "./..", "Leading \'{E}\' - Notice how \'{E}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(null)", "Linux", "{P} ..", "0", "insert before", "../.", "Leading \'{E}\' - Notice how \'{0}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(null)", "Linux", "{P} ..", "0", "append after", "./..", "Leading \'{E}\' - Notice how \'{0}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(null)", "Linux", "{P} ..", "9", "insert before", "./..", "Leading \'{E}\' - Notice how \'{0}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(null)", "Linux", "{P} ..", "9", "append after", "./..", "Leading \'{E}\' - Notice how \'{0}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute(".", "Linux", "{P} ..", "0", "insert before", "../.", "Leading \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute(".", "Linux", "{P} ..", "0", "append after", "./..", "Leading \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute(".", "Linux", "{P} ..", "9", "insert before", "./..", "Leading \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute(".", "Linux", "{P} ..", "9", "append after", "./..", "Leading \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("..", "Linux", "{P} ..", "0", "insert before", "../..", "Leading \'..\'", null)]
        [NUnit.Framework.TestCaseAttribute("..", "Linux", "{P} ..", "0", "append after", "../..", "Leading \'..\'", null)]
        [NUnit.Framework.TestCaseAttribute("..", "Linux", "{P} ..", "9", "insert before", "../..", "Leading \'..\'", null)]
        [NUnit.Framework.TestCaseAttribute("..", "Linux", "{P} ..", "9", "append after", "../..", "Leading \'..\'", null)]
        [NUnit.Framework.TestCaseAttribute("a/b/c", "Linux", "{0}", "0", "insert before", "/a/b/c", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("a/b/c", "Linux", "{0}", "0", "append after", "a//b/c", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("a/b/c", "Linux", "{0}", "2", "insert before", "a/b//c", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("a/b/c", "Linux", "{0}", "2", "append after", "a/b/c/", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("a/b/c", "Linux", "{0}", "9", "insert before", "a/b/c/", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("a/b/c", "Linux", "{0}", "9", "append after", "a/b/c/", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:/a/b/c", "Linux", "{0}", "0", "insert before", "/C:/a/b/c", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:/a/b/c", "Linux", "{0}", "0", "append after", "C://a/b/c", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:/a/b/c", "Linux", "{0}", "3", "insert before", "C:/a/b//c", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:/a/b/c", "Linux", "{0}", "3", "append after", "C:/a/b/c/", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:/a/b/c", "Linux", "{0}", "9", "insert before", "C:/a/b/c/", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:/a/b/c", "Linux", "{0}", "9", "append after", "C:/a/b/c/", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a/b/c", "Linux", "{0}", "0", "insert before", "/C:a/b/c", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a/b/c", "Linux", "{0}", "0", "append after", "C:a//b/c", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a/b/c", "Linux", "{0}", "2", "insert before", "C:a/b//c", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a/b/c", "Linux", "{0}", "2", "append after", "C:a/b/c/", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a/b/c", "Linux", "{0}", "9", "insert before", "C:a/b/c/", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a/b/c", "Linux", "{0}", "9", "append after", "C:a/b/c/", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("/a/b/c", "Linux", "{0}", "0", "insert before", "//a/b/c", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("/a/b/c", "Linux", "{0}", "0", "append after", "//a/b/c", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("/a/b/c", "Linux", "{0}", "3", "insert before", "/a/b//c", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("/a/b/c", "Linux", "{0}", "3", "append after", "/a/b/c/", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("/a/b/c", "Linux", "{0}", "9", "insert before", "/a/b/c/", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("/a/b/c", "Linux", "{0}", "9", "append after", "/a/b/c/", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("//a/b/c", "Linux", "{0}", "0", "insert before", "///a/b/c", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("//a/b/c", "Linux", "{0}", "0", "append after", "//a//b/c", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("//a/b/c", "Linux", "{0}", "2", "insert before", "//a/b//c", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("//a/b/c", "Linux", "{0}", "2", "append after", "//a/b/c/", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("//a/b/c", "Linux", "{0}", "9", "insert before", "//a/b/c/", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("//a/b/c", "Linux", "{0}", "9", "append after", "//a/b/c/", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("(empty)", "Linux", "{0}", "0", "insert before", "/.", "Leading \'{E}\' - Notice how \'{E}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(empty)", "Linux", "{0}", "0", "append after", "./", "Leading \'{E}\' - Notice how \'{E}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(empty)", "Linux", "{0}", "9", "insert before", "./", "Leading \'{E}\' - Notice how \'{E}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(empty)", "Linux", "{0}", "9", "append after", "./", "Leading \'{E}\' - Notice how \'{E}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(null)", "Linux", "{0}", "0", "insert before", "/.", "Leading \'{E}\' - Notice how \'{0}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(null)", "Linux", "{0}", "0", "append after", "./", "Leading \'{E}\' - Notice how \'{0}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(null)", "Linux", "{0}", "9", "insert before", "./", "Leading \'{E}\' - Notice how \'{0}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(null)", "Linux", "{0}", "9", "append after", "./", "Leading \'{E}\' - Notice how \'{0}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute(".", "Linux", "{0}", "0", "insert before", "/.", "Leading \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute(".", "Linux", "{0}", "0", "append after", "./", "Leading \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute(".", "Linux", "{0}", "9", "insert before", "./", "Leading \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute(".", "Linux", "{0}", "9", "append after", "./", "Leading \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("..", "Linux", "{0}", "0", "insert before", "/..", "Leading \'..\'", null)]
        [NUnit.Framework.TestCaseAttribute("..", "Linux", "{0}", "0", "append after", "../", "Leading \'..\'", null)]
        [NUnit.Framework.TestCaseAttribute("..", "Linux", "{0}", "9", "insert before", "../", "Leading \'..\'", null)]
        [NUnit.Framework.TestCaseAttribute("..", "Linux", "{0}", "9", "append after", "../", "Leading \'..\'", null)]
        [NUnit.Framework.TestCaseAttribute("a/b/c", "Linux", "{E}", "0", "insert before", "/a/b/c", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("a/b/c", "Linux", "{E}", "0", "append after", "a//b/c", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("a/b/c", "Linux", "{E}", "2", "insert before", "a/b//c", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("a/b/c", "Linux", "{E}", "2", "append after", "a/b/c/", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("a/b/c", "Linux", "{E}", "9", "insert before", "a/b/c/", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("a/b/c", "Linux", "{E}", "9", "append after", "a/b/c/", "Leading \'{G} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:/a/b/c", "Linux", "{E}", "0", "insert before", "/C:/a/b/c", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:/a/b/c", "Linux", "{E}", "0", "append after", "C://a/b/c", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:/a/b/c", "Linux", "{E}", "3", "insert before", "C:/a/b//c", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:/a/b/c", "Linux", "{E}", "3", "append after", "C:/a/b/c/", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:/a/b/c", "Linux", "{E}", "9", "insert before", "C:/a/b/c/", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:/a/b/c", "Linux", "{E}", "9", "append after", "C:/a/b/c/", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a/b/c", "Linux", "{E}", "0", "insert before", "/C:a/b/c", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a/b/c", "Linux", "{E}", "0", "append after", "C:a//b/c", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a/b/c", "Linux", "{E}", "2", "insert before", "C:a/b//c", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a/b/c", "Linux", "{E}", "2", "append after", "C:a/b/c/", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a/b/c", "Linux", "{E}", "9", "insert before", "C:a/b/c/", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("C:a/b/c", "Linux", "{E}", "9", "append after", "C:a/b/c/", "Leading \'{G} C:\'", null)]
        [NUnit.Framework.TestCaseAttribute("/a/b/c", "Linux", "{E}", "0", "insert before", "//a/b/c", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("/a/b/c", "Linux", "{E}", "0", "append after", "//a/b/c", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("/a/b/c", "Linux", "{E}", "3", "insert before", "/a/b//c", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("/a/b/c", "Linux", "{E}", "3", "append after", "/a/b/c/", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("/a/b/c", "Linux", "{E}", "9", "insert before", "/a/b/c/", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("/a/b/c", "Linux", "{E}", "9", "append after", "/a/b/c/", "Leading \'{$} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("//a/b/c", "Linux", "{E}", "0", "insert before", "///a/b/c", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("//a/b/c", "Linux", "{E}", "0", "append after", "//a//b/c", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("//a/b/c", "Linux", "{E}", "2", "insert before", "//a/b//c", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("//a/b/c", "Linux", "{E}", "2", "append after", "//a/b/c/", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("//a/b/c", "Linux", "{E}", "9", "insert before", "//a/b/c/", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("//a/b/c", "Linux", "{E}", "9", "append after", "//a/b/c/", "Leading \'{X} a\'", null)]
        [NUnit.Framework.TestCaseAttribute("(empty)", "Linux", "{E}", "0", "insert before", "/.", "Leading \'{E}\' - Notice how \'{E}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(empty)", "Linux", "{E}", "0", "append after", "./", "Leading \'{E}\' - Notice how \'{E}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(empty)", "Linux", "{E}", "9", "insert before", "./", "Leading \'{E}\' - Notice how \'{E}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(empty)", "Linux", "{E}", "9", "append after", "./", "Leading \'{E}\' - Notice how \'{E}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(null)", "Linux", "{E}", "0", "insert before", "/.", "Leading \'{E}\' - Notice how \'{0}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(null)", "Linux", "{E}", "0", "append after", "./", "Leading \'{E}\' - Notice how \'{0}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(null)", "Linux", "{E}", "9", "insert before", "./", "Leading \'{E}\' - Notice how \'{0}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute("(null)", "Linux", "{E}", "9", "append after", "./", "Leading \'{E}\' - Notice how \'{0}\' turns into \'{S}\'", null)]
        [NUnit.Framework.TestCaseAttribute(".", "Linux", "{E}", "0", "insert before", "/.", "Leading \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute(".", "Linux", "{E}", "0", "append after", "./", "Leading \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute(".", "Linux", "{E}", "9", "insert before", "./", "Leading \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute(".", "Linux", "{E}", "9", "append after", "./", "Leading \'.\'", null)]
        [NUnit.Framework.TestCaseAttribute("..", "Linux", "{E}", "0", "insert before", "/..", "Leading \'..\'", null)]
        [NUnit.Framework.TestCaseAttribute("..", "Linux", "{E}", "0", "append after", "../", "Leading \'..\'", null)]
        [NUnit.Framework.TestCaseAttribute("..", "Linux", "{E}", "9", "insert before", "../", "Leading \'..\'", null)]
        [NUnit.Framework.TestCaseAttribute("..", "Linux", "{E}", "9", "append after", "../", "Leading \'..\'", null)]
        public virtual void ICanInsertAndAppendSegmentsToAnyPointInAPath(string path, string oS, string segment, string offset, string action, string result, string notes, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Path", path);
            argumentsOfScenario.Add("OS", oS);
            argumentsOfScenario.Add("Segment", segment);
            argumentsOfScenario.Add("Offset", offset);
            argumentsOfScenario.Add("Action", action);
            argumentsOfScenario.Add("Result", result);
            argumentsOfScenario.Add("Notes", notes);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I can insert and append segments to any point in a path", null, tagsOfScenario, argumentsOfScenario);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
 testRunner.Given(string.Format("I have the following path: {0}", path), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 9
   testRunner.And(string.Format("I\'m running on the following Operating System: {0}", oS), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 10
   testRunner.And("I parse the path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 11
  testRunner.When(string.Format("I manipulate the path by adding the segment ({0}) {1} offset {2}", segment, action, offset), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 12
   testRunner.And("I ask for the path to be represented as a string", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 13
  testRunner.Then(string.Format("I should receive the following string: {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
